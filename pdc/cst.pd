utilizar bepd/builtins
utilizar bepd/x/enum

[DOCUMENTA
@brief{Un nodo del AST.}
DOCUMENTA]
clase Nodo
    [DOCUMENTA
    @brief{Área textual de este token.}

    Es una instancia de @pd(#:utilizar "pdc/tokens"){ÁreaTextual}.
    DOCUMENTA]
    atributo áreaTextual

    [DOCUMENTA
    @brief{ID del nodo.}

    No necesitas especificarlo al crear un nodo, ya que @pd(#:utilizar
    "pdc/tabla"){EntablarÁrbol} le dará un valor apropiado.
    DOCUMENTA]
    atributo id
finclase

[DOCUMENTA
@brief{Nodo especial que representa un "variadic".}

Su atributo @pd{interno} contiene un segundo nodo. Los tipos válidos para este
atributo depende del nodo que contenga al variadic.

Los nodos variadic son usados en dos partes distíntas:

@itemlist(
@item{Al declarar funciones/métodos/procedimientos: @pd{funcion EscribirTabulado: ...valores},
@pd{...valores} es un @italic{parámetro variadic}. Estos siempre son
representados como un @pd{NodoVariadic} cuyo @code{#interno} es siempre
un @pd{NodoIdentificador}.}
@item{Al llamar a una función/metodo/procedimiento: @pd{EscribirTabulado: 1, 2, ...otros},
@pd{...otros} es un @italic{argumento variadic}. Estos son representados
como un @pd{NodoVariadic} con un @pd{NodoExpresion} dentro.}
)
DOCUMENTA]
clase NodoVariadic hereda Nodo
    atributo interno
    metodo comoTexto
finclase

metodo NodoVariadic#comoTexto
    devolver {(NodoVariadic: ~t en ~t)}#formatear: yo#interno, yo#áreaTextual
finmetodo

metodo NodoVariadic#recursivo: f
    %f: yo#interno
finmetodo

[DOCUMENTA
@brief{Nodo especial que representa una secuencia de instrucciones.}

@pd{instrucciones} es el arreglo con instrucciones y expresiones del bloque.
DOCUMENTA]
clase NodoBloque hereda Nodo
    atributos instrucciones, ámbito
finclase

metodo NodoBloque#comoTexto
    devolver {(NodoBloque: ~t en ~t)}#formatear: yo#instrucciones, yo#áreaTextual
finmetodo

metodo NodoBloque#recursivo: f
    ParaCadaElemento: yo#instrucciones, f
finmetodo

[DOCUMENTA
@brief{Clase base para todos los nodos que son instrucciones.}
DOCUMENTA]
clase NodoInstrucción hereda Nodo
finclase

[DOCUMENTA
@brief{Nodo principal de un programa.}

Todas las instrucciones y expresiones principales de un programa están en este
nodo, dentro del @pd{NodoBloque} @pd{instrucciones}.
DOCUMENTA]
clase NodoPrograma hereda NodoInstrucción
    atributo instrucciones
    metodo comoTexto
finclase

metodo NodoPrograma#comoTexto
    devolver {(NodoPrograma: ~t en ~t)}#formatear: yo#instrucciones, yo#áreaTextual
finmetodo

metodo NodoPrograma#recursivo: f
    %f: yo#instrucciones
finmetodo

[DOCUMENTA
@brief{Declara una o más variables.}

El atributo @pd{nombres} contiene un arreglo de @pd{NodoIdentificador}, que son
los nombres de las variables a crear.
DOCUMENTA]
clase NodoVariable hereda NodoInstrucción
    atributo nombres
    metodo comoTexto
finclase

metodo NodoVariable#comoTexto
    devolver {(NodoVariable: ~t en ~t)}#formatear: yo#nombres, yo#áreaTextual
finmetodo

metodo NodoVariable#recursivo: f
    ParaCadaElemento: yo#nombres, f
finmetodo

[DOCUMENTA
@brief{Fija un objetivo a un valor.}

El atributo @pd{objetivo} contiene la @italic{cosa} a fijar. Puede ser un
@pd{NodoIdentificador}, en cuyo caso se debe fijar esa variable al resultado de
evaluar el atributo @pd{valor} que es un @pd{NodoExpresion}.

También puede ser un @pd{NodoEnviarMensaje}, eso corresponde con la sintáxis
@pd{fijar A#b a C}. Si ese es el caso, entonces se debe convertir a
@pd{A#fijar_b: C}. Esto también aplica a objetivos más compicados mientras
@pd{objetivo} sea un @pd{NodoEnviarMensaje}: @pd{fijar (A + B * C)#a#b#c a 12}
es igual a @pd{(A + B * C)#a#b#fijar_c: 12}.
DOCUMENTA]
clase NodoFijar hereda NodoInstrucción
    atributos objetivo, valor
    metodo comoTexto
finclase

metodo NodoFijar#comoTexto
    devolver {(NodoFijar: ~t a ~t en ~t)}#formatear: yo#objetivo, yo#valor, yo#áreaTextual
finmetodo

metodo NodoFijar#recursivo: f
    %f: yo#objetivo
    %f: yo#valor
finmetodo

[DOCUMENTA
@brief{Escribe un valor.}

@pd{valor} debe ser un @pd{NodoExpresion}.
DOCUMENTA]
clase NodoEscribir hereda NodoInstrucción
    atributo valor
    metodo comoTexto
finclase

metodo NodoEscribir#comoTexto
    devolver {(NodoEscribir: ~t en ~t)}#formatear: yo#valor, yo#áreaTextual
finmetodo

metodo NodoEscribir#recursivo: f
    %f: yo#valor
finmetodo

[DOCUMENTA
@brief{Corresponde a la instrucción @pd{nl}.}
DOCUMENTA]
clase NodoNl hereda NodoInstrucción
    metodo comoTexto
finclase

metodo NodoNl#comoTexto
    devolver {(NodoNl en ~t)}#formatear: yo#áreaTextual
finmetodo

metodo NodoNl#recursivo: f
finmetodo

[DOCUMENTA
@brief{Declara uno o más atributos dentro de una clase.}

Los @pd{NodoClase} pueden contener declaraciónes de atributos y métodos. Este
nodo representa una de esas declaraciones de uno o más atributos.

@pd{nombres} es un arreglo de @pd{NodoIdentificador}, que contiene los
atributos a crear.
DOCUMENTA]
clase NodoDeclaraciónDeAtributosEnClase hereda NodoInstrucción
    atributos nombres

    metodo comoTexto
finclase

metodo NodoDeclaraciónDeAtributosEnClase#comoTexto
    devolver {(NodoDeclaraciónDeAtributosEnClase: ~t en ~t)}#formatear: yo#nombres, yo#áreaTextual
finmetodo

metodo NodoDeclaraciónDeAtributosEnClase#recursivo: f
    ParaCadaElemento: yo#nombres, f
finmetodo

[DOCUMENTA
@brief{Declara un método dentro de una clase.}

@pd{esEstático} es un @pd{Boole} indicando si el método es estático o no.

@pd{nombre} es el nombre del método, un @pd{NodoIdentificador}.

@pd{parámetros} es un arreglo de @pd{NodoIdentificador}, opcionalmente, el
último elemento puede ser un parámetro variadic (un @pd{NodoVariadic} que
contiene un @pd{NodoIdentificador}).
DOCUMENTA]
clase NodoDeclaraciónDeMétodoEnClase hereda NodoInstrucción
    atributos esEstático, nombre, parámetros

    metodo comoTexto
finclase

metodo NodoDeclaraciónDeMétodoEnClase#comoTexto
    devolver {(NodoDeclaraciónDeMétodoEnClase: esEstático = ~t, nombre = ~t, params = ~t en ~t)}#formatear: yo#esEstático, yo#nombre, yo#parámetros, yo#áreaTextual
finmetodo

metodo NodoDeclaraciónDeMétodoEnClase#recursivo: f
    %f: yo#nombre
    ParaCadaElemento: yo#parámetros, f
finmetodo

[DOCUMENTA
@brief{Una declaración de clase.}

Corresponde con la sintáxis:

@codeblock|{
clase NOMBRE hereda BASE extiende CLASE implementa CLASE
    atributos A, B, C
    metodo A: A, B
    metodo B: A, B
finclase
}|

@pd{nombre} es el @pd{NodoIdentificador} que contiene el nombre de la clase.

@pd{claseBase} es la clase especificada en @pd{hereda}, o @pd{NULO} si la clase
no tiene ninguna cláusula @pd{hereda}. Es un @pd{NodoExpresion}.

@pd{extiendeClases} es un arreglo de @pd{NodoExpresion} que son todas las
clases especificadas con @pd{extiende}.

@pd{implementaClases} también es un arreglo de @pd{NodoExpresion} con todas las
clases que esta implementa.

@pd{declaraciones} es un arreglo de @pd{NodoDeclaraciónDeAtributosEnClase}
(para cada declaración de atributos) o de @pd{NodoDeclaraciónDeMétodoEnClase}
(para cada declaración de un método).
DOCUMENTA]
clase NodoClase hereda NodoInstrucción
    atributos nombre, claseBase, extiendeClases, implementaClases, declaraciones

    metodo comoTexto
finclase

metodo NodoClase#comoTexto
    devolver {(NodoClase: nombre = ~t, claseBase = ~t, extiendeClases = ~t, implementaClases = ~t, declaraciones = ~t en ~t)}#formatear:
        yo#nombre, yo#claseBase, yo#extiendeClases, yo#implementaClases, yo#declaraciones, yo#áreaTextual
finmetodo

metodo NodoClase#recursivo: f
    %f: yo#nombre
    si no EsNulo: yo#claseBase
        %f: yo#claseBase
    finsi
    ParaCadaElemento: yo#extiendeClases, f
    ParaCadaElemento: yo#implementaClases, f
    ParaCadaElemento: yo#declaraciones, f
finmetodo

[DOCUMENTA
@brief{Una función o procedimiento.}

@pd{nombre} es un @pd{NodoIdentificador}, el nombre de la función.

@pd{parámetros} es un arreglo de @pd{NodoIdentificador}, opcionalmente el
último elemento puede ser un parámetro variadic (un @pd{NodoVariadic} que
contiene un @pd{NodoIdentificador}).

@pd{cuerpo} es el cuerpo de la función. Un @pd{NodoBloque}.

@pd{ámbito} será llenado por el pase de resolución de nombres con el ámbito de
esta función.
DOCUMENTA]
clase NodoFunción hereda NodoInstrucción
    atributos nombre, parámetros, cuerpo, ámbito

    metodo comoTexto
finclase

metodo NodoFunción#comoTexto
    devolver {(NodoFunción: nombre = ~t, params = ~t, cuerpo = ~t en ~t)}#formatear: yo#nombre, yo#parámetros, yo#cuerpo, yo#áreaTextual
finmetodo

metodo NodoFunción#recursivo: f
    %f: yo#nombre
    ParaCadaElemento: yo#parámetros, f
    %f: yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Nodo para la palabra clave @pd{necesitas}.}

@pd{expresión} es un @pd{NodoExpresion} que será evaluado.
DOCUMENTA]
clase NodoNecesitas hereda NodoInstrucción
    atributo expresión

    metodo comoTexto
finclase

metodo NodoNecesitas#comoTexto
    devolver {(NodoNecesitas: ~t en ~t)}#formatear: yo#expresión, yo#áreaTextual
finmetodo

metodo NodoNecesitas#recursivo: f
    %f: yo#expresión
finmetodo

[DOCUMENTA
@brief{Nodo para devolver un valor.}

@pd{expresión} es un @pd{NodoExpresion}.
DOCUMENTA]
clase NodoDevolver hereda NodoInstrucción
    atributo expresión

    metodo comoTexto
finclase

metodo NodoDevolver#comoTexto
    devolver {(NodoDevolver: ~t en ~t)}#formatear: yo#expresión, yo#áreaTextual
finmetodo

metodo NodoDevolver#recursivo: f
    %f: yo#expresión
finmetodo

[DOCUMENTA
@brief{Condicional si.}

@pd{condicional} es un @pd{NodoExpresion}. @pd{siVerdadero} y @pd{siFalso} son @pd{NodoBloque}s.
DOCUMENTA]
clase NodoSi hereda NodoInstrucción
    atributos condicional, siVerdadero, siFalso

    metodo comoTexto
finclase

metodo NodoSi#comoTexto
    devolver {(NodoSi: ~t entonces ~t si no ~t en ~t)}#formatear: yo#condicional, yo#siVerdadero, yo#siFalso, yo#áreaTextual
finmetodo

metodo NodoSi#recursivo: f
    %f: yo#condicional
    %f: yo#siVerdadero
    %f: yo#siFalso
finmetodo

[DOCUMENTA
@brief{Bucle mientras.}

@pd{condicional} es un @pd{NodoExpresion}. @pd{cuerpo} es un @pd{NodoBloque}.
DOCUMENTA]
clase NodoMientras hereda NodoInstrucción
    atributos condicional, cuerpo

    metodo comoTexto
finclase

metodo NodoMientras#comoTexto
    devolver {(NodoMientras: ~t hacer ~t en ~t)}#formatear: yo#condicional, yo#cuerpo, yo#áreaTextual
finmetodo

metodo NodoMientras#recursivo: f
    %f: yo#condicional
    %f: yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Define un método fuera de una clase.}

Corresponde a la sintáxis:

@codeblock|{
metodo CLASE#METODO: PARAMS
    CUERPO
finmetodo
}|

@pd{deClase} es el @pd{NodoIdentificador} el cual es la clase a la cual el
método pertenece.

@pd{esEstático} indica si el método es estático o no (es un @pd{Boole}).

@pd{nombre} es el @pd{NodoIdentificador} que es el nombre del método.

@pd{parámetros} tiene el mismo formato que los parámetros de un
@pd{NodoFunción}.

@pd{cuerpo} es un @pd{NodoBloque}.

@pd{ámbito} será llenado por el pase de resolución de nombres con el ámbito de
esta función.
DOCUMENTA]
clase NodoMétodo hereda NodoInstrucción
    atributos deClase, esEstático, nombre, parámetros, cuerpo, ámbito

    metodo comoTexto
finclase

metodo NodoMétodo#comoTexto
    devolver {(NodoMétodo: de ~t es estático = ~t nombre = ~t pide ~t es ~t en ~t)}#formatear: yo#deClase, yo#esEstático, yo#nombre, yo#parámetros, yo#cuerpo, yo#áreaTextual
finmetodo

metodo NodoMétodo#recursivo: f
    %f: yo#deClase
    %f: yo#nombre
    ParaCadaElemento: yo#parámetros, f
    %f: yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Declara atributos de una clase fuera de la declaración de clase.}

Corresponde a:

@codeblock|{
atributos CLASE#ATTR1, CLASE#ATTR2
}|

@pd{deClase} es el @pd{NodoIdentificador} de la clase a la que este atributo
pertenece.

@pd{nombres} es el arreglo de @pd{NodoIdentificador} que son los nombres de los
atributos.
DOCUMENTA]
clase NodoAtributos hereda NodoInstrucción
    atributos deClase, nombres

    metodo comoTexto
finclase

metodo NodoAtributos#comoTexto
    devolver {(NodoAtributos: de ~t nombres = ~t en ~t)}#formatear: yo#deClase, yo#nombres, yo#áreaTextual
finmetodo

metodo NodoAtributos#recursivo: f
    %f: yo#deClase
    ParaCadaElemento: yo#nombres, f
finmetodo

[DOCUMENTA
@brief{Importa otro módulo.}

Corresponde a la sintáxis:

@codeblock|{
utilizar MODULO (NOMBRE1, NOMBRE2 como NOMBRE3, NOMBRE4) como ESPACIO
}|

@pd{módulo} es un @pd{NodoTextoLiteral} (con una ruta relativa a un archivo) o
un @pd{NodoIdentificador} (con el nombre del módulo) y es el módulo a importar.

@pd{espacioDeNombres} es @pd{NULO} o un @pd{NodoIdentificador} y es el espacio
de nombres en el que se deberá importar el módulo.

@pd{nombresEspecíficos} es el más complicado: Si no se especifico ningún nombre
específico a importar, es @pd{NULO}. De lo contrario es un arreglo. Cada
elemento del arreglo es un @pd{NodoIdentificador} (en el caso en el que un
identificador solo se importa) o un arreglo de dos elementos (ámbos
@pd{NodoIdentificador}) en el caso en el que se renombra un identificador; el
primer elemento es el nombre como está en el módulo y el segundo elemento es el
nombre con el cual debería ser importado.
DOCUMENTA]
clase NodoUtilizar hereda NodoInstrucción
    atributos módulo, espacioDeNombres, nombresEspecíficos

    metodo comoTexto
finclase

metodo NodoUtilizar#comoTexto
    devolver {(NodoUtilizar: ~t como ~t solo ~t en ~t)}#formatear: yo#módulo, yo#espacioDeNombres, yo#nombresEspecíficos, yo#áreaTextual
finmetodo

metodo NodoUtilizar#recursivo: f
    %f: yo#módulo
    si no EsNulo: yo#espacioDeNombres
        %f: yo#espacioDeNombres
    finsi
    si no EsNulo: yo#nombresEspecíficos
        ParaCadaElemento: yo#nombresEspecíficos, procedimiento: nombreORenombre
            si EsInstancia: nombreORenombre, NodoIdentificador
                %f: nombreORenombre
            sino
                %f: (nombreORenombre#en: 0)
                %f: (nombreORenombre#en: 1)
            finsi
        finprocedimiento
    finsi
finmetodo

[DOCUMENTA
@brief{Clase base para todos los nodos que son expresiones}
DOCUMENTA]
clase NodoExpresion hereda Nodo
finclase

[DOCUMENTA
@brief{Un identificador.}

@pd{nombre} es un texto que es el nombre del identificador.

@pd{esLiteral} indica si el identificador es literal: algunos identificadores
(los literales) en el CST no representan variables sino textos.

@pd{esDefinición} indica si el identificador está en su definición. Es decir,
si es verdadero este identificador está definiendo una variable.

@pd{esDefiniciónAutoejecutable} determina si se está definiendo a una variable
autoejecutable.

@pd{aplicaAutoejecución} es si la autoejecución aplica en este contexto. Esto
significa que esta variable, de ser autoejecutable, debería representar una
llamada en vez de un acceso. Por ejemplo, para la variable @pd{Hola} en
@pd{Hola + 1} aplica la autoejecución, mientras que para @pd{Adios} en
@pd{Adios: 12} no aplica.
DOCUMENTA]
clase NodoIdentificador hereda NodoExpresion
    atributos nombre, esLiteral, esDefinición, esDefiniciónAutoejecutable, aplicaAutoejecución
    metodo comoTexto
finclase

metodo NodoIdentificador#comoTexto
    devolver {(NodoIdentificador: [~t] en ~t)}#formatear: yo#nombre, yo#áreaTextual
finmetodo

metodo NodoIdentificador#recursivo: f
finmetodo

[DOCUMENTA
@brief{Literal numérica.}

@pd{valor} es un @pd{Numero} y es el valor numérico de la literal.
DOCUMENTA]
clase NodoNumeroLiteral hereda NodoExpresion
    atributo valor
    metodo comoTexto
finclase

metodo NodoNumeroLiteral#comoTexto
    devolver {(NodoNumeroLiteral: ~t en ~t)}#formatear: yo#valor, yo#áreaTextual
finmetodo

metodo NodoNumeroLiteral#recursivo: f
finmetodo

[DOCUMENTA
@brief{Una literal textual.}

@pd{valor} es un @pd{Texto} y es el valor de la literal.
DOCUMENTA]
clase NodoTextoLiteral hereda NodoExpresion
    atributo valor
    metodo comoTexto
finclase

metodo NodoTextoLiteral#comoTexto
    devolver {(NodoTextoLiteral: [~t] en ~t)}#formatear: yo#valor, yo#áreaTextual
finmetodo

metodo NodoTextoLiteral#recursivo: f
finmetodo

[DOCUMENTA
@brief{Llama un procedimiento o función.}

El AST no tiene una representación para llamar a un procedimiento sin
argumentos. Esto se determina al momento de resolver los nombres.

La sintáxis @pd{A: B, C, D} corresponde con este nodo.

@pd{proc} es un @pd{NodoIdentificador}, el procedimiento o función a llamar.

@pd{argumentos} es un arreglo de @pd{NodoExpresion} y de @pd{NodoVariadic}
donde el @pd{NodoVariadic} envuelve otro @pd{NodoExpresion}.
DOCUMENTA]
clase NodoLlamarProcedimiento hereda NodoExpresion
    atributos proc, argumentos
    metodo comoTexto
finclase

metodo NodoLlamarProcedimiento#comoTexto
    devolver {(NodoLlamarProcedimiento: ~t con ~t en ~t)}#formatear: yo#proc, yo#argumentos, yo#áreaTextual
finmetodo

metodo NodoLlamarProcedimiento#recursivo: f
    %f: yo#proc
    ParaCadaElemento: yo#argumentos, f
finmetodo

[DOCUMENTA
@brief{Envia un mensaje a un objeto.}

Corresponde a @pd{OBJETO#MENSAJE: ARGUMENTOS}.

@pd{objeto} es un @pd{NodoExpresion}. @pd{mensaje} es un @pd{Texto}.
@pd{argumentos} tiene el mismo formato que en @pd{NodoLlamarProcedimiento}.
DOCUMENTA]
clase NodoEnviarMensaje hereda NodoExpresion
    atributos objeto, mensaje, argumentos
    metodo comoTexto
finclase

metodo NodoEnviarMensaje#comoTexto
    devolver {(NodoEnviarMensaje: enviar ~t a ~t con ~t en ~t)}#formatear: yo#mensaje, yo#objeto, yo#argumentos, yo#áreaTextual
finmetodo

metodo NodoEnviarMensaje#recursivo: f
    %f: yo#objeto
    ParaCadaElemento: yo#argumentos, f
finmetodo

[DOCUMENTA
@brief{Un operador.}

@pd{lhs} y @pd{rhs} son @pd{NodoExpresion}. @pd{op} es un @pd{TokenOperador}.
DOCUMENTA]
clase NodoOperador hereda NodoExpresion
    atributos lhs, op, rhs
    metodo comoTexto
finclase

metodo NodoOperador#comoTexto
    devolver {(NodoOperador: ~t ~t ~t en ~t)}#formatear: yo#lhs, yo#op, yo#rhs, yo#áreaTextual
finmetodo

metodo NodoOperador#recursivo: f
    %f: yo#lhs
    %f: yo#rhs
finmetodo

[DOCUMENTA
@brief{No llama a una variable.}

@pd{base} es un @pd{NodoIdentificador}. @pd{mensajes} es un arreglo
(posiblemente vacío) de @pd{TokenIdentificador}.

Corresponde a la sintáxis @pd{&Variable} y @pd{&(Objeto#mensaje1#mensaje2)}.
DOCUMENTA]
clase NodoNoLlamar hereda NodoExpresion
    atributos base, mensajes
    metodo comoTexto
finclase

metodo NodoNoLlamar#comoTexto
    devolver {(NodoNoLlamar: ~t con ~t en ~t)}#formatear: yo#base, yo#mensajes, yo#áreaTextual
finmetodo

metodo NodoNoLlamar#recursivo: f
    %f: yo#base
finmetodo

[DOCUMENTA
@brief{Nodo de autoejecutar una variable.}

Corresponde con las sintáxis @pd{%VAR} y @pd{%VAR: A, B, C}.

@pd{expr} es un @pd{NodoExpresion} que será llamado. @pd{argumentos} tiene el
mismo formato que en @pd{NodoLlamarProcedimiento}.
DOCUMENTA]
clase NodoAutoejecutar hereda NodoExpresion
    atributos expr, argumentos
    metodo comoTexto
finclase

metodo NodoAutoejecutar#comoTexto
    devolver {(NodoAutoejecutar: ~t con ~t en ~t)}#formatear: yo#expr, yo#argumentos, yo#áreaTextual
finmetodo

metodo NodoAutoejecutar#recursivo: f
    %f: yo#expr
    ParaCadaElemento: yo#argumentos, f
finmetodo

[DOCUMENTA
@brief{Una función anónima.}

@pd{esMétodo} es un boole indicando si la función/procedimiento fue declarada
con la palabra clave @pd{metodo} (en cuyo caso debe tener una variable
@pd{yo}).

@pd{parámetros} tiene el mismo formato que en @pd{NodoFunción}.

@pd{cuerpo} es un arreglo de instrucciones.

@pd{ámbito} será llenado por el pase de resolución de nombres con el ámbito de
esta función.
DOCUMENTA]
clase NodoFunciónAnónima hereda NodoExpresion
    atributos esMétodo, parámetros, cuerpo, ámbito

    metodo comoTexto
finclase

metodo NodoFunciónAnónima#comoTexto
    devolver {(NodoFunciónAnónima: (esMétodo: ~t): ~t es ~t en ~t)}#formatear: yo#esMétodo, yo#parámetros, yo#cuerpo, yo#áreaTextual
finmetodo

metodo NodoFunciónAnónima#recursivo: f
    ParaCadaElemento: yo#parámetros, f
    %f: yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Tipo de igualdad de @pd{NodoSonIguales}.}

@enum(
@defenum(IGUALES){Los valores se comparan por igualdad.}
@defenum(DIFERENTES){Los valores se comparan por desigualdad.}
@defenum("IDÉNTICOS"){Los valores se comparan por identidad.}
)
DOCUMENTA]
variable TipoIgualdad
fijar TipoIgualdad a Enum: {TipoIgualdad}, {IGUALES}, {DIFERENTES}, {IDÉNTICOS}

[DOCUMENTA
@brief{Compara dos expresiones por igualdad.}

@pd{tipoIgualdad} es un @pd{TipoIgualdad} indicando el tipo de igualdad.

@pd{lhs} y @pd{rhs} son @pd{NodoExpresion}.
DOCUMENTA]
clase NodoSonIguales hereda NodoExpresion
    atributos lhs, rhs, tipoIgualdad

    metodo comoTexto
finclase

metodo NodoSonIguales#comoTexto
    devolver {(NodoSonIguales: ~t es ~t a ~t en ~t)}#formatear: yo#lhs, yo#tipoIgualdad, yo#rhs, yo#áreaTextual
finmetodo

metodo NodoSonIguales#recursivo: f
    %f: yo#lhs
    %f: yo#rhs
finmetodo

[DOCUMENTA
@brief{Nodo de la expresión @pd{no}.}

@pd{expresión} es un @pd{NodoExpresion}.
DOCUMENTA]
clase NodoNo hereda NodoExpresion
    atributo expresión

    metodo comoTexto
finclase

metodo NodoNo#comoTexto
    devolver {(NodoNo: ~t en ~t)}#formatear: yo#expresión, yo#áreaTextual
finmetodo

metodo NodoNo#recursivo: f
    %f: yo#expresión
finmetodo

[DOCUMENTA
@brief{Nodo clonar.}

@pd{expresiónAClonar} es un @pd{NodoExpresion}.

@pd{campos} es un arreglo de arreglos de longitud 2, donde el primer valor es
un texto (el nombre del campo) y el segundo valor un @pd{NodoExpresion} (el
nuevo valor del campo).
DOCUMENTA]
clase NodoClonar hereda NodoExpresion
    atributos expresiónAClonar, campos

    metodo comoTexto
finclase

metodo NodoClonar#comoTexto
    devolver {(NodoClonar: ~t => ~t en ~t)}#formatear: yo#expresiónAClonar, yo#campos, yo#áreaTextual
finmetodo

metodo NodoClonar#recursivo: f
    %f: yo#expresiónAClonar
    ParaCadaElemento: yo#campos, procedimiento: campo
        %f: (campo#en: 1)
    finprocedimiento
finmetodo
