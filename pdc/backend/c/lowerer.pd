utilizar bepd/builtins
utilizar bepd/x/puerto (PuertoDeEscritura)

utilizar pdc/backend/c/ir (Opcode, FunciónIR, ContinuaciónIR, ProgramaIR, Etiqueta, EscribirPrograma)


[DOCUMENTA
@brief{Compila un programa (IR) y lo guarda en un puerto de escritura.}

@params(
@defparam("puertoDeEscritura"){@pd{PuertoDeEscritura} en el cual se escribirá
el código compilado.}

@defparam("identificadorDelMódulo"){Prefijo de compilación del módulo. Un
@pd{Texto}.}

@defparam("identificadoresDeDependencias"){@pd{Arreglo} de @pd{Texto}s con los
prefijos de compilación de todas las dependencias (incluyendo dependencias
transitivas) de este módulo.}

@defparam("programa"){El @pd{ProgramaIR} a compilar.}
)

@devuelve{Nada.}
DOCUMENTA]
procedimiento CompilarPrograma: puertoDeEscritura, identificadorDelMódulo, identificadoresDeDependencias, programa
    EmitirLínea: puertoDeEscritura, {#define PDCRT_INTERNO}
    EmitirLínea: puertoDeEscritura, {#include "pdcrt.h"}

    ParaCadaElemento: programa#funciones, procedimiento: func
        DeclararFunción: puertoDeEscritura, identificadorDelMódulo, func
    finprocedimiento
    ParaCadaElemento: programa#continuaciones, procedimiento: k
        DeclararContinuación: puertoDeEscritura, identificadorDelMódulo, k
    finprocedimiento

    ParaCadaElemento: programa#funciones, procedimiento: func
        CompilarFunción: puertoDeEscritura, identificadorDelMódulo, func
    finprocedimiento
    ParaCadaElemento: programa#continuaciones, procedimiento: k
        CompilarContinuación: puertoDeEscritura, identificadorDelMódulo, k
    finprocedimiento

    EmitirLínea: puertoDeEscritura, {PDCRT_DECLARAR_ENTRYPOINT(}, identificadorDelMódulo, {, }, (NombreDeLaFunción: identificadorDelMódulo, programa#idDeLaFunciónPrincipal), {)}

    EmitirLínea: puertoDeEscritura, {#ifdef PDCRT_MAIN}
    EmitirLínea: puertoDeEscritura, {#define PDCRT_DEPS(X) \}
    EmitirLínea: puertoDeEscritura, {    X(}, identificadorDelMódulo, {, }, (EscaparTexto: identificadorDelMódulo), {, }, identificadorDelMódulo#longitud, {)},
        ((identificadoresDeDependencias#longitud = 0)#escojer: {}, { \})
    ParaCadaElementoConÍndice: identificadoresDeDependencias, procedimiento: id, i
        EmitirLínea: puertoDeEscritura, {    X(}, id, {, }, (EscaparTexto: id), {, }, id#longitud, {)},
                     ((i < (identificadoresDeDependencias#longitud - 1))#escojer: { \}, {})
    finprocedimiento
    EmitirLínea: puertoDeEscritura, {PDCRT_DECLARAR_DEPS(PDCRT_DEPS)}
    EmitirLínea: puertoDeEscritura, {PDCRT_DECLARAR_MAIN(}, identificadorDelMódulo, {)}
    EmitirLínea: puertoDeEscritura, {#endif}
finprocedimiento

procedimiento Emitir: puerto, ...valores
    ParaCadaElemento: valores, procedimiento: valor
        puerto#escribirTexto: valor#comoTexto
    finprocedimiento
finprocedimiento

procedimiento EmitirLínea: puerto, ...valores
    Emitir: puerto, ...valores
    puerto#escribirTexto: {~%}#formatear
finprocedimiento

funcion NombreDeLaFunción: identificadorDelMódulo, id
    devolver {pdc_m~t_f~t}#formatear: identificadorDelMódulo, id
finfuncion

funcion NombreDeLaContinuación: identificadorDelMódulo, id
    devolver {pdc_m~t_k~t}#formatear: identificadorDelMódulo, id
finfuncion

variable NL
fijar NL a {
}

funcion EscaparTexto: txt
    variable res
    fijar res a {}
    ParaCadaNúmero: 0, txt#longitud, procedimiento: i
        variable c
        fijar c a txt#en: i
        si c = {\}
            fijar res a res#concatenar: {\\}
            fijar c a {}
        finsi
        si c = {"}
            fijar res a res#concatenar: {\"}
            fijar c a {}
        finsi
        si c = {'}
            fijar res a res#concatenar: {\'}
            fijar c a {}
        finsi
        si c = NL
            fijar res a res#concatenar: {\n}
            fijar c a {}
        finsi
        si no c = {}
            fijar res a res#concatenar: c
        finsi
    finprocedimiento
    devolver ({"}#concatenar: res)#concatenar: {"}
finfuncion

procedimiento DeclararFunción: puerto, identificadorDelMódulo, func
    EmitirLínea: puerto, {static pdcrt_k }, (NombreDeLaFunción: identificadorDelMódulo, func#id), {(pdcrt_ctx* ctx, int args, pdcrt_k k);}
finprocedimiento

procedimiento DeclararContinuación: puerto, identificadorDelMódulo, k
    EmitirLínea: puerto, {static pdcrt_k }, (NombreDeLaContinuación: identificadorDelMódulo, k#id), {(pdcrt_ctx* ctx, pdcrt_marco* m);}
finprocedimiento

procedimiento CompilarFunción: puerto, identificadorDelMódulo, func
    EmitirLínea: puerto, {static pdcrt_k }, (NombreDeLaFunción: identificadorDelMódulo, func#id), {(pdcrt_ctx* ctx, int args, pdcrt_k k)}
    EmitirLínea: puerto, «{»
    EmitirLínea: puerto, {pdcrt_marco* m = pdcrt_crear_marco(ctx, }, func#númLocales, {, }, func#númCapturas, {, args, k);}
    ParaCadaElemento: func#instrucciones, procedimiento: tupla
        CompilarTupla: puerto, identificadorDelMódulo, tupla
    finprocedimiento
    EmitirLínea: puerto, «}»
finprocedimiento

procedimiento CompilarContinuación: puerto, identificadorDelMódulo, k
    variable nombre
    fijar nombre a NombreDeLaContinuación: identificadorDelMódulo, k#id
    EmitirLínea: puerto, {static pdcrt_k }, nombre, {(pdcrt_ctx* ctx, pdcrt_marco* m)}
    EmitirLínea: puerto, «{»
    EmitirLínea: puerto, «if(pdcrt_stack_lleno(ctx)) return (pdcrt_k) { .kf = », nombre, «, .marco = m };»
    ParaCadaElemento: k#instrucciones, procedimiento: tupla
        CompilarTupla: puerto, identificadorDelMódulo, tupla
    finprocedimiento
    EmitirLínea: puerto, «}»
finprocedimiento

procedimiento CompilarTupla: puerto, identificadorDelMódulo, tupla
    variable opcode
    fijar opcode a tupla#en: 0

    si opcode = Opcode#params
        EmitirLínea: puerto, {return pdcrt_params(ctx, m, }, (tupla#en: 1), {, }, ((tupla#en: 2)#escojer: {1}, {0}), {, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 3)), {);}
    finsi

    si opcode = Opcode#csaltar
        EmitirLínea: puerto, {if(pdcrt_saltar_condicional(ctx))}
        EmitirLínea: puerto, {return pdcrt_saltar(ctx, m, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)#id), {);}
        EmitirLínea: puerto, {else}
        EmitirLínea: puerto, {return pdcrt_saltar(ctx, m, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 2)), {);}
    finsi

    si opcode = Opcode#saltar
        EmitirLínea: puerto, {return pdcrt_saltar(ctx, m, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)#id), {);}
    finsi

    si opcode = Opcode#enviarMensaje
        EmitirLínea: puerto, {static const int proto[] =}
        Emitir: puerto, «{ »
        ParaCadaElemento: (tupla#en: 2), procedimiento: esVariadic
            Emitir: puerto, (esVariadic#escojer: {1}, {0}), {, }
        finprocedimiento
        EmitirLínea: puerto, «};»
        variable k
        fijar k a tupla#en: 3
        EmitirLínea: puerto,
            {return pdcrt_enviar_mensaje(ctx, m, },
            (EscaparTexto: (tupla#en: 1)),
            {, },
            (tupla#en: 1)#longitud,
            {, proto, },
            (tupla#en: 2)#longitud,
            {, },
            (NombreDeLaContinuación: identificadorDelMódulo, k),
            {);}
    finsi

    si opcode = Opcode#variadic
        EmitirLínea: puerto, {pdcrt_variadic(ctx, m, }, (tupla#en: 1), {);}
    finsi

    si opcode = Opcode#fijarLocal
        EmitirLínea: puerto, {pdcrt_fijar_local(ctx, m, }, (tupla#en: 1), {, pdcrt_sacar(ctx));}
    finsi

    si opcode = Opcode#fijarLocalC
        EmitirLínea: puerto, {pdcrt_fijar_captura(ctx, m, }, (tupla#en: 1), {, pdcrt_sacar(ctx));}
    finsi

    si opcode = Opcode#obtenerLocal
        EmitirLínea: puerto, {pdcrt_extender_pila(ctx, m, 1);}
        EmitirLínea: puerto, {pdcrt_empujar(ctx, pdcrt_obtener_local(ctx, m, }, (tupla#en: 1), {));}
    finsi

    si opcode = Opcode#obtenerLocalC
        EmitirLínea: puerto, {pdcrt_extender_pila(ctx, m, 1);}
        EmitirLínea: puerto, {pdcrt_empujar(ctx, pdcrt_obtener_captura(ctx, m, }, (tupla#en: 1), {));}
    finsi

    si opcode = Opcode#caja
        EmitirLínea: puerto, {pdcrt_envolver_en_caja(ctx, m);}
    finsi

    si opcode = Opcode#fijarCaja
        EmitirLínea: puerto, {pdcrt_fijar_caja(ctx, pdcrt_obtener_local(ctx, m, }, (tupla#en: 1), {), pdcrt_sacar(ctx));}
    finsi

    si opcode = Opcode#fijarCajaC
        EmitirLínea: puerto, {pdcrt_fijar_caja(ctx, pdcrt_obtener_captura(ctx, m, }, (tupla#en: 1), {), pdcrt_sacar(ctx));}
    finsi

    si opcode = Opcode#obtenerCaja
        EmitirLínea: puerto, {pdcrt_extender_pila(ctx, m, 1);}
        EmitirLínea: puerto, {pdcrt_empujar(ctx, pdcrt_obtener_caja(ctx, pdcrt_obtener_local(ctx, m, }, (tupla#en: 1), {)));}
    finsi

    si opcode = Opcode#obtenerCajaC
        EmitirLínea: puerto, {pdcrt_extender_pila(ctx, m, 1);}
        EmitirLínea: puerto, {pdcrt_empujar(ctx, pdcrt_obtener_caja(ctx, pdcrt_obtener_captura(ctx, m, }, (tupla#en: 1), {)));}
    finsi

    si opcode = Opcode#prn
        EmitirLínea: puerto, {return pdcrt_prn(ctx, m, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)), {);}
    finsi

    si opcode = Opcode#prnl
        EmitirLínea: puerto, {pdcrt_prnl(ctx);}
    finsi

    si opcode = Opcode#assert
        EmitirLínea: puerto, {pdcrt_assert(ctx);}
    finsi

    si opcode = Opcode#devolverN
        EmitirLínea: puerto, {return pdcrt_devolver(ctx, m, }, (tupla#en: 1), {);}
    finsi

    si opcode = Opcode#empujarNúmero
        variable n
        fijar n a tupla#en: 1
        si n#techo = n
            EmitirLínea: puerto, {pdcrt_empujar_entero(ctx, m, PDCRT_ENTERO_C(}, n, {));}
        sino
            EmitirLínea: puerto, {pdcrt_empujar_float(ctx, m, PDCRT_FLOAT_C(}, n, {));}
        finsi
    finsi

    si opcode = Opcode#empujarTexto
        EmitirLínea: puerto, {pdcrt_empujar_texto(ctx, m, }, (EscaparTexto: (tupla#en: 1)), {, }, (tupla#en: 1)#longitud, {);}
    finsi

    si opcode = Opcode#empujarNulo
        EmitirLínea: puerto, {pdcrt_empujar_nulo(ctx, m);}
    finsi

    si opcode = Opcode#negar
        EmitirLínea: puerto, {pdcrt_negar(ctx);}
    finsi

    si opcode = Opcode#sonIdénticos
        EmitirLínea: puerto, {pdcrt_son_identicos(ctx);}
    finsi

    si opcode = Opcode#obtenerObjeto
        EmitirLínea: puerto, {pdcrt_obtener_clase_objeto(ctx);}
    finsi

    si opcode = Opcode#mkclz
        EmitirLínea: puerto, {pdcrt_empujar_closure(ctx, m, }, (NombreDeLaFunción: identificadorDelMódulo, (tupla#en: 1)), {, }, (tupla#en: 2), {);}
    finsi

    si opcode = Opcode#continuar
        EmitirLínea: puerto, {return pdcrt_saltar(ctx, m, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)), {);}
    finsi

    si opcode = Opcode#empujarEspacioDeNombres
        EmitirLínea: puerto, {pdcrt_empujar_espacio_de_nombres(ctx, m);}
    finsi

    si opcode = Opcode#agregarNombre
        EmitirLínea: puerto, {return pdcrt_agregar_nombre(ctx, m, }, (EscaparTexto: (tupla#en: 1)), {, }, (tupla#en: 1)#longitud, {, }, ((tupla#en: 2)#escojer: {true}, {false}), {, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 3)), {);}
    finsi

    si opcode = Opcode#exportar
        EmitirLínea: puerto, {return pdcrt_exportar(ctx, m, }, (EscaparTexto: identificadorDelMódulo), {, }, identificadorDelMódulo#longitud, {);}
    finsi

    si opcode = Opcode#obtenerRuntime
        EmitirLínea: puerto, {pdcrt_obtener_objeto_runtime(ctx, m);}
    finsi

    si opcode = Opcode#importar
        EmitirLínea: puerto, {return pdcrt_importar(ctx, m, }, (EscaparTexto: (tupla#en: 1)), {, }, (tupla#en: 1)#longitud, {, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 2)), {);}
    finsi

    si opcode = Opcode#extraer
        EmitirLínea: puerto, {return pdcrt_extraerv(ctx, m, }, (EscaparTexto: (tupla#en: 1)), {, }, (tupla#en: 1)#longitud, {, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 2)), {);}
    finsi

    si opcode = Opcode#comoEspacioDeNombres
        EmitirLínea: puerto, {pdcrt_convertir_a_espacio_de_nombres(ctx, m);}
    finsi

    si opcode = Opcode#sacar
        EmitirLínea: puerto, {pdcrt_sacar(ctx);}
    finsi

    si opcode = Opcode#obtenerEspacioDeNombresDelRuntime
        EmitirLínea: puerto, {pdcrt_obtener_espacio_de_nombres_del_runtime(ctx, m);}
    finsi
finprocedimiento
