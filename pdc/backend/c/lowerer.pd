utilizar bepd/builtins

utilizar pdc/backend/c/ir (Opcode, FunciónIR, ContinuaciónIR, ProgramaIR, Etiqueta, EscribirPrograma)


procedimiento CompilarPrograma: puertoDeEscritura, identificadorDelMódulo, programa
    ParaCadaElemento: programa#funciones, procedimiento: func
        CompilarFunción: puertoDeEscritura, identificadorDelMódulo, func
    finprocedimiento
    ParaCadaElemento: programa#continuaciones, procedimiento: k
        CompilarContinuación: puertoDeEscritura, identificadorDelMódulo, k
    finprocedimiento
finprocedimiento

procedimiento Emitir: puerto, ...valores
    ParaCadaElemento: valores, procedimiento: valor
        puerto#escribirTexto: valor#comoTexto
    finprocedimiento
finprocedimiento

procedimiento EmitirLínea: puerto, ...valores
    Emitir: puerto, ...valores
    puerto#escribirTexto: {~%}#formatear
finprocedimiento

funcion NombreDeLaFunción: identificadorDelMódulo, id
    devolver {pdc_m~t_f~t}#formatear: identificadorDelMódulo, id
finfuncion

funcion NombreDeLaContinuación: identificadorDelMódulo, id
    devolver {pdc_m~t_k~t}#formatear: identificadorDelMódulo, id
finfuncion

funcion EscaparTexto: txt
    devolver ({"}#concatenar: txt)#concatenar: {"}
finfuncion

procedimiento CompilarFunción: puerto, identificadorDelMódulo, func
    EmitirLínea: puerto, {pdcrt_kp }, (NombreDeLaFunción: identificadorDelMódulo, func#id), {(pdcrt_ctx* ctx, pdcrt_k k)}
    EmitirLínea: puerto, «{»
    EmitirLínea: puerto, {pdcrt_marco* m = pdcrt_crear_marco(ctx);}
    ParaCadaElemento: func#instrucciones, procedimiento: tupla
        CompilarTupla: puerto, identificadorDelMódulo, tupla
    finprocedimiento
    EmitirLínea: puerto, «}»
finprocedimiento

procedimiento CompilarContinuación: puerto, identificadorDelMódulo, k
    EmitirLínea: puerto, {pdcrt_kp }, (NombreDeLaContinuación: identificadorDelMódulo, k#id), {(pdcrt_ctx* ctx, pdcrt_marco* m)}
    EmitirLínea: puerto, «{»
    ParaCadaElemento: k#instrucciones, procedimiento: tupla
        CompilarTupla: puerto, identificadorDelMódulo, tupla
    finprocedimiento
    EmitirLínea: puerto, «}»
finprocedimiento

procedimiento CompilarTupla: puerto, identificadorDelMódulo, tupla
    variable opcode
    fijar opcode a tupla#en: 0

    si opcode = Opcode#csaltar
        EmitirLínea: puerto, {if(pdcrt_saltar_condicional(ctx))}
        EmitirLínea: puerto, {return pdcrt_saltar(ctx, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)#id), {);}
        EmitirLínea: puerto, {else}
        EmitirLínea: puerto, {return pdcrt_continuar(ctx, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 2)), {);}
    finsi

    si opcode = Opcode#saltar
        EmitirLínea: puerto, {return pdcrt_saltar(ctx, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)#id), {);}
    finsi

    si opcode = Opcode#enviarMensaje
        EmitirLínea: puerto, {static const int proto[] =}
        EmitirLínea: puerto, «{»
        ParaCadaElemento: (tupla#en: 2), procedimiento: esVariadic
            Emitir: puerto, (esVariadic#escojer: {1}, {0}), {, }
        finprocedimiento
        EmitirLínea: puerto, «};»
        variable k
        fijar k a tupla#en: 3
        EmitirLínea: puerto, {return pdcrt_enviar_mensaje(ctx, }, (EscaparTexto: (tupla#en: 1)), {, proto, }, (NombreDeLaContinuación: identificadorDelMódulo, k), {);}
    finsi

    si opcode = Opcode#variadic
        EmitirLínea: puerto, {pdcrt_variadic(ctx, }, (tupla#en: 1), {);}
    finsi

    si opcode = Opcode#fijarLocal
        EmitirLínea: puerto, {m->locales[}, (tupla#en: 1), {] = pdcrt_sacar_de_la_pila(ctx);}
    finsi

    si opcode = Opcode#fijarLocalC
        EmitirLínea: puerto, {m->capturas[}, (tupla#en: 1), {] = pdcrt_sacar_de_la_pila(ctx);}
    finsi

    si opcode = Opcode#obtenerLocal
        EmitirLínea: puerto, {pdcrt_empujar_en_la_pila(ctx, m->locales[}, (tupla#en: 1), {]);}
    finsi

    si opcode = Opcode#obtenerLocalC
        EmitirLínea: puerto, {pdcrt_empujar_en_la_pila(ctx, m->capturas[}, (tupla#en: 1), {]);}
    finsi

    si opcode = Opcode#caja
        EmitirLínea: puerto, {pdcrt_caja(ctx);}
    finsi

    si opcode = Opcode#fijarCaja
        EmitirLínea: puerto, {m->locales[}, (tupla#en: 1), {]->caja = pdcrt_sacar_de_la_pila(ctx);}
    finsi

    si opcode = Opcode#fijarCajaC
        EmitirLínea: puerto, {m->capturas[}, (tupla#en: 1), {]->caja = pdcrt_sacar_de_la_pila(ctx);}
    finsi

    si opcode = Opcode#obtenerCaja
        EmitirLínea: puerto, {pdcrt_empujar_en_la_pila(ctx, m->locales[}, (tupla#en: 1), {]->caja);}
    finsi

    si opcode = Opcode#obtenerCajaC
        EmitirLínea: puerto, {pdcrt_empujar_en_la_pila(ctx, m->capturas[}, (tupla#en: 1), {]->caja);}
    finsi

    si opcode = Opcode#prn
        EmitirLínea: puerto, {return pdcrt_prn(ctx, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)), {);}
    finsi

    si opcode = Opcode#prnl
        EmitirLínea: puerto, {pdcrt_prnl(ctx);}
    finsi

    si opcode = Opcode#assert
        EmitirLínea: puerto, {pdcrt_assert(ctx);}
    finsi

    si opcode = Opcode#devolverN
        EmitirLínea: puerto, {return pdcrt_devolver(ctx, }, (tupla#en: 1), {);}
    finsi

    si opcode = Opcode#empujarNúmero
        variable n
        fijar n a tupla#en: 1
        si n#techo = n
            EmitirLínea: puerto, {pdcrt_empujar_entero(ctx, }, n, {);}
        sino
            EmitirLínea: puerto, {pdcrt_empujar_float(ctx, }, n, {);}
        finsi
    finsi

    si opcode = Opcode#empujarTexto
        EmitirLínea: puerto, {pdcrt_empujar_texto(ctx, }, (EscaparTexto: (tupla#en: 1)), {);}
    finsi

    si opcode = Opcode#empujarNulo
        EmitirLínea: puerto, {pdcrt_empujar_nulo(ctx);}
    finsi

    si opcode = Opcode#negar
        EmitirLínea: puerto, {pdcrt_negar(ctx);}
    finsi

    si opcode = Opcode#sonIdénticos
        EmitirLínea: puerto, {pdcrt_son_identicos(ctx);}
    finsi

    si opcode = Opcode#obtenerObjeto
        EmitirLínea: puerto, {pdcrt_obtener_clase_objeto(ctx);}
    finsi

    si opcode = Opcode#mkclz
        EmitirLínea: puerto, {pdcrt_empujar_closure(ctx, }, (NombreDeLaFunción: identificadorDelMódulo, (tupla#en: 1)), {, }, (tupla#en: 2), {);}
    finsi

    si opcode = Opcode#continuar
        EmitirLínea: puerto, {return pdcrt_continuar(ctx, }, (NombreDeLaContinuación: identificadorDelMódulo, (tupla#en: 1)), {);}
    finsi

    si opcode = Opcode#empujarEspacioDeNombres
        EmitirLínea: puerto, {pdcrt_empujar_espacio_de_nombres(ctx);}
    finsi

    si opcode = Opcode#agregarNombre
        EmitirLínea: puerto, {pdcrt_agregar_nombre(ctx, }, (EscaparTexto: (tupla#en: 1)), {, }, ((tupla#en: 2)#escojer: {true}, {false}), {);}
    finsi

    si opcode = Opcode#exportar
        EmitirLínea: puerto, {return pdcrt_exportar(ctx);}
    finsi
finprocedimiento
