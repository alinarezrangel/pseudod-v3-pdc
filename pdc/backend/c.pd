utilizar bepd/builtins
utilizar bepd/datos/caja (Caja)
utilizar bepd/x/adhoc (ObjetoAdHoc)
utilizar bepd/x/sistemaDeArchivos/archivo (LeerArchivo)

utilizar pdc/ast como AST
utilizar pdc/nombres (TablasDeResoluciónDeNombres)
utilizar pdc/capturas (TablasDeCapturas)
utilizar pdc/backend/c/ir (Opcode, FunciónIR, Etiqueta, ContinuaciónIR, ProgramaIR, EscribirPrograma)
utilizar pdc/info (IMPL_COMPILADOR)


[DOCUMENTA
@brief{Emisor del IR de C.}

Véase el módulo @code{pdc/backend/c/ir} para una descripción del la
representación intermediaria.

Lleva registro de las continuaciones, las funciones y las instrucciones del
programa.

El emisor actúa como un arreglo de instrucciones. Estas instrucciones pueden
ser movidas a una función (mediante el método @code{#moverAFunción}) o a un
nuevo programa (mediante el método @code{#moverAPrograma}).
DOCUMENTA]
clase Emisor
    [DOCUMENTA
    @brief{Crea un nuevo emisor.}
    DOCUMENTA]
    metodo estatico crear

    [DOCUMENTA
    @brief{Crea un nuevo subemisor.}

    Los dos emisores (el devuelto y @pd{emisorPadre}) comparten continuaciones
    y podrán ser combinados de vuelta en uno en un futuro (mediante el método
    @code{#combinar}).
    DOCUMENTA]
    metodo estatico subEmisor: emisorPadre

    [DOCUMENTA
    @brief{Emite una instrucción.}

    @pd{opcode} es el opcode (un @pd{Opcode}) a emitir, mientras que @pd{args}
    son los argumentos del mismo. El tipo de @pd{args} depende del opcode dado,
    véase la documentación del IR para más información.

    Si la instrucción requiere una continuación, esta será agregada
    automáticamente al final de los argumentos. Por ejemplo, para emitir el
    opcode @pd(#:utilizar "pdc/backend/c/ir"){Opcode#enviarMensaje} que pide
    tres argumentos: el mensaje, el prototipo y la continuación, tu solo llamas
    a emitir con dos: el mensaje y el prototipo. La continuación será agregada
    al final de forma automática.
    DOCUMENTA]
    metodo emitir: opcode, ...args

    [DOCUMENTA
    @brief{Mueve todo el código emitido hasta ahora a una función nueva.}

    Devuelve la @pd{FunciónIR} creada.
    DOCUMENTA]
    metodo moverAFunción

    [DOCUMENTA
    @brief{Mueve todo el código, funciones y continuaciones a un programa
    nuevo.}

    Devuelve el @pd{ProgramaIR} creado.
    DOCUMENTA]
    metodo moverAPrograma

    [DOCUMENTA
    @brief{Mueve todas las funciones del @pd{subEmisor} al emisor actual.}

    @pd{subEmisor} debe ser un subemisor del emisor actual.
    DOCUMENTA]
    metodo combinar: subEmisor

    [DOCUMENTA
    @brief{Ajusta una etiqueta ya emitida para que apunte a la posición
    actual.}

    @pd{etiqueta} debe ser una @pd{Etiqueta} ya fue emitida.
    DOCUMENTA]
    metodo ajustarEtiqueta: etiqueta
finclase

atributos Emisor#cabecera, Emisor#instrucciones, Emisor#idDeContinuaciónActual,
          Emisor#funciones, Emisor#continuaciones, Emisor#idDeFunción,
          Emisor#idDeContinuación

metodo estatico Emisor#subEmisor: emisorPadre
    variable c
    fijar c a yo#crear
    fijar c#continuaciones a emisorPadre#continuaciones
    fijar c#idDeFunción a emisorPadre#idDeFunción
    fijar c#idDeContinuación a emisorPadre#idDeContinuación
    devolver c
finmetodo

metodo Emisor#inicializar
    fijar yo#instrucciones a Arreglo#vacio
    fijar yo#cabecera a yo#instrucciones
    fijar yo#funciones a Arreglo#vacio
    fijar yo#continuaciones a Arreglo#vacio
    fijar yo#idDeContinuaciónActual a NULO
    fijar yo#idDeFunción a Caja#crear: 0
    fijar yo#idDeContinuación a Caja#crear: 0
finmetodo

metodo Emisor#emitir: ...tupla
    necesitas tupla#longitud > 0
    variable opcode
    fijar opcode a tupla#en: 0
    si son diferentes opcode y Opcode#etiqueta
        yo#instrucciones#agregarAlFinal: tupla
    finsi
    si opcode#requiereContinuación
        variable k
        fijar k a ContinuaciónIR#crear: Arreglo#vacio
        fijar k#id a yo#idDeContinuación#valor
        fijar yo#idDeContinuaciónActual a k#id
        fijar yo#idDeContinuación#valor a yo#idDeContinuación#valor + 1
        si opcode = Opcode#etiqueta
            yo#instrucciones#agregarAlFinal: (Arreglo#crearCon: Opcode#continuar, k#id)
        finsi
        tupla#agregarAlFinal: k#id
        fijar yo#instrucciones a k#instrucciones
        yo#continuaciones#agregarAlFinal: k
    finsi
finmetodo

metodo Emisor#moverAFunción
    variable func
    fijar func a FunciónIR#crear: yo#cabecera
    fijar func#id a yo#idDeFunción#valor
    fijar yo#idDeFunción#valor a yo#idDeFunción#valor + 1
    yo#funciones#agregarAlFinal: func
    fijar yo#instrucciones a Arreglo#vacio
    fijar yo#cabecera a yo#instrucciones
    fijar yo#idDeContinuaciónActual a NULO
    devolver func
finmetodo

metodo Emisor#moverAPrograma
    variable funcPrincipal
    fijar funcPrincipal a yo#moverAFunción
    devolver ProgramaIR#crear: funcPrincipal#id, yo#funciones, yo#continuaciones
finmetodo

metodo Emisor#combinar: subEmisor
    ParaCadaElemento: subEmisor#funciones, procedimiento: func
        yo#funciones#agregarAlFinal: func
    finprocedimiento
finmetodo

metodo Emisor#ajustarEtiqueta: etiqueta
    yo#emitir: Opcode#etiqueta, etiqueta
    fijar etiqueta#id a yo#idDeContinuaciónActual
finmetodo


[DOCUMENTA
@brief{Escribe una representación textual del emisor.}

Principalmente útil al depurar.
DOCUMENTA]
procedimiento EscribirEmisor: emisor
    procedimiento escribirInstrucciones: pref, instrs
        ParaCadaElemento: instrs, procedimiento: instr
            escribir pref#comoTexto
            escribir {    }
            escribir (instr#en: 0)#nombre
            ParaCadaNúmero: 1, instr#longitud, procedimiento: i
                escribir {	}
                escribir (instr#en: i)#comoTexto
            finprocedimiento
            nl
        finprocedimiento
    finprocedimiento

    Escribir: {.instrucciones}
    escribirInstrucciones: {}, emisor#cabecera
    Escribir: {.funciones}
    ParaCadaElemento: emisor#funciones, procedimiento: func
        Escribir: {  .func}, func#id, func#númCapturas, func#númLocales
        escribirInstrucciones: {  }, func#instrucciones
    finprocedimiento
    Escribir: {.continuaciones}
    ParaCadaElemento: emisor#continuaciones, procedimiento: k
        Escribir: {  .cont}, k#id
        escribirInstrucciones: {  }, k#instrucciones
    finprocedimiento
finprocedimiento


[DOCUMENTA
@brief{Itera sobre cada elemento del arreglo al revés.}

Comienza por el último elemento (@pd{arr#longitud - 1}) y llega hasta el
primero (@pd{0}). Con cada elemento, llama a @pd{proc} con dos argumentos: el
elemento y el índice del mismo.
DOCUMENTA]
procedimiento ParaCadaElementoEnReversaConÍndice: arr, proc
    ParaCadaNúmero: 0, arr#longitud, procedimiento: i
        variable j
        fijar j a (arr#longitud - 1) - i
        devolver %proc: (arr#en: j), j
    finprocedimiento
finprocedimiento


[DOCUMENTA
@brief{Clase que compila un AST ya anotado y analizado a un IR.}
DOCUMENTA]
clase EstadoDeEmisión
    [DOCUMENTA
    @brief{Crea un compilador a IR en su estado inicial.}

    @params(
    @defparam(tablasRnAst){La @pd{TablasDeResoluciónDeNombres} del AST.}
    @defparam(tablasMcAst){La @pd{TablasDeCapturas} del AST.}
    @defparam(emisor){El @pd{Emisor} en el que se escribirá el código.}
    @defparam(bdMod){La @pd(#:utilizar "pdc/módulos"){BaseDeDatosDeMódulos}
    a usar.}
    )

    @devuelve{El estado de emisión.}
    DOCUMENTA]
    metodo estatico inicial: tablasRnAst, tablasMcAst, emisor, bdMod

    [DOCUMENTA
    @brief{Compila un fragmento del AST.}

    Para compilar un programa, debería ser un @pd{AST#NodoPrograma}.

    @devuelve{Nada, el resultado estará guardado en el emisor del estado.}
    DOCUMENTA]
    metodo emitir: ast
finclase

atributos EstadoDeEmisión#tablasRnAst, EstadoDeEmisión#tablasMcAst,
          EstadoDeEmisión#emisor,
          [ Diccionario que mapea cada binding local a su índice de local. ]
          EstadoDeEmisión#locales,
          [ Diccionario que mapea cada binding local a su índice de captura. ]
          EstadoDeEmisión#capturas,
          EstadoDeEmisión#bdMod

metodo estatico EstadoDeEmisión#inicial: tablasRnAst, tablasMcAst, emisor, bdMod
    devolver yo#crear: tablasRnAst, tablasMcAst, emisor, bdMod
finmetodo

metodo EstadoDeEmisión#inicializar: tablasRnAst, tablasMcAst, emisor, bdMod
    fijar yo#tablasRnAst a tablasRnAst
    fijar yo#tablasMcAst a tablasMcAst
    fijar yo#emisor a emisor
    fijar yo#locales a Diccionario#vacío
    fijar yo#capturas a Diccionario#vacío
    fijar yo#bdMod a bdMod
finmetodo

metodo EstadoDeEmisión#subestado: emisor, locales, capturas
    variable sub
    fijar sub a EstadoDeEmisión#crear
    fijar sub#tablasRnAst a yo#tablasRnAst
    fijar sub#tablasMcAst a yo#tablasMcAst
    fijar sub#emisor a emisor
    fijar sub#locales a locales
    fijar sub#capturas a capturas
    fijar sub#bdMod a yo#bdMod
    devolver sub
finmetodo

metodo EstadoDeEmisión#emitirFijarIdentificador: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaUsos#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaDefiniciones#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi
    si EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarLocal, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarLocalC, (yo#capturas#en: reg#binding)
        finsi
    sino
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarCaja, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarCajaC, (yo#capturas#en: reg#binding)
        finsi
    finsi
    devolver reg#binding
finmetodo

metodo EstadoDeEmisión#emitirObtenerIdentificador: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaUsos#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaDefiniciones#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi

    si EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#obtenerLocal, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#obtenerLocalC, (yo#capturas#en: reg#binding)
        finsi
    sino
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#obtenerCaja, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#obtenerCajaC, (yo#capturas#en: reg#binding)
        finsi
    finsi
    devolver reg#binding
finmetodo

funcion ObtenerCapturasYLocales: nodoConCapturas, tablasMcAst, emisor
    variables reg, locales, capturas, sub

    fijar reg a tablasMcAst#tablaCapturas#buscarÚnico: {idNodo}, nodoConCapturas#id
    fijar capturas a Diccionario#vacío
    ParaCadaElementoConÍndice: reg#bindingsCapturados, procedimiento: binding, i
        capturas#fijarEn: binding, i
    finprocedimiento
    emisor#emitir: Opcode#capturas, reg#bindingsCapturados#longitud

    fijar reg a tablasMcAst#tablaLocales#buscarÚnico: {idNodo}, nodoConCapturas#id
    fijar locales a Diccionario#vacío
    ParaCadaElementoConÍndice: reg#bindingsLocales, procedimiento: binding, i
        locales#fijarEn: binding, i
    finprocedimiento
    emisor#emitir: Opcode#locales, reg#bindingsLocales#longitud

    devolver ObjetoAdHoc: {locales}, locales,
                          {capturas}, capturas
finfuncion

metodo EstadoDeEmisión#inicializarVariable: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaDefiniciones#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaUsos#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi

    si no EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        si yo#capturas#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarCajaC, (yo#capturas#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarCaja, (yo#locales#en: reg#binding)
        finsi
    sino
        si yo#capturas#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarLocalC, (yo#capturas#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarLocal, (yo#locales#en: reg#binding)
        finsi
    finsi
finmetodo

metodo EstadoDeEmisión#prepararDeclaración: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaDefiniciones#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaUsos#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi

    si no EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        [ La variable es capturada, necesitamos inicializarla a una caja vacía ]
        yo#emisor#emitir: Opcode#empujarNulo
        yo#emisor#emitir: Opcode#caja
        si yo#capturas#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarLocalC, (yo#capturas#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarLocal, (yo#locales#en: reg#binding)
        finsi
    finsi
finmetodo

metodo EstadoDeEmisión#emitir: ast
    si EsInstancia: ast, AST#NodoBloque
        ParaCadaElemento: ast#cuerpo, procedimiento: nodo
            si EsInstancia: nodo, AST#NodoVariable
                yo#prepararDeclaración: nodo#nombre
            finsi
            si EsInstancia: nodo, AST#NodoUtilizar
                si no EsNulo: nodo#espacioDeNombres
                    yo#prepararDeclaración: nodo#espacioDeNombres
                finsi
                ParaCadaElemento: nodo#nombresEspecíficos, procedimiento: nombreEspecífico
                    yo#prepararDeclaración: nombreEspecífico#renombre
                finprocedimiento
            finsi
        finprocedimiento
        ParaCadaElemento: ast#cuerpo, &(yo#emitir)
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoPrograma
        variables sub, caps
        fijar caps a ObtenerCapturasYLocales: ast, yo#tablasMcAst, yo#emisor
        fijar sub a yo#subestado: yo#emisor, caps#locales, caps#capturas
        sub#emitir: ast#cuerpo
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoIdentificador
        [ Solo maneja los usos de un nombre. Las definiciones son manejadas manualmente ]
        yo#emitirObtenerIdentificador: ast
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoVariable
        yo#emisor#emitir: Opcode#empujarNulo
        yo#inicializarVariable: ast#nombre
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoFijar
        yo#emitir: ast#expresión
        yo#emitirFijarIdentificador: ast#objetivo
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoEscribir
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#prn
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoNl
        yo#emisor#emitir: Opcode#prnl
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoNecesitas
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#assert
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoDevolver
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#devolverN, 1
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoSi
        variable etqSino, etqFinsi
        fijar etqSino a Etiqueta#vacía
        fijar etqFinsi a Etiqueta#vacía

        yo#emitir: ast#condición
        yo#emisor#emitir: Opcode#negar
        yo#emisor#emitir: Opcode#csaltar, etqSino
        yo#emitir: ast#cuerpoSiVerdadero
        yo#emisor#emitir: Opcode#saltar, etqFinsi
        yo#emisor#ajustarEtiqueta: etqSino
        yo#emitir: ast#cuerpoSiFalso
        yo#emisor#ajustarEtiqueta: etqFinsi
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoMientras
        variable etqInicio, etqFinmientras
        fijar etqInicio a Etiqueta#vacía
        fijar etqFinmientras a Etiqueta#vacía

        yo#emisor#ajustarEtiqueta: etqInicio
        yo#emitir: ast#condición
        yo#emisor#emitir: Opcode#negar
        yo#emisor#emitir: Opcode#csaltar, etqFinmientras
        yo#emitir: ast#cuerpo
        yo#emisor#emitir: Opcode#saltar, etqInicio
        yo#emisor#ajustarEtiqueta: etqFinmientras
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoUtilizar
        variables informaciónDelMódulo, módulo
        fijar informaciónDelMódulo a yo#tablasRnAst#tablaInformaciónDeMódulo#buscarÚnico: {idNodo}, ast#id
        fijar módulo a yo#bdMod#buscarMódulo: informaciónDelMódulo#paquete, informaciónDelMódulo#módulo

        yo#emisor#emitir: Opcode#importar, módulo#prefijoDelMódulo
        ParaCadaElemento: ast#nombresEspecíficos, procedimiento: nombreEspecífico
            yo#emisor#emitir: Opcode#extraer, nombreEspecífico#nombre#valor
            yo#inicializarVariable: nombreEspecífico#renombre
        finprocedimiento

        si no EsNulo: ast#espacioDeNombres
            yo#emisor#emitir: Opcode#comoEspacioDeNombres
            yo#inicializarVariable: ast#espacioDeNombres
        sino
            yo#emisor#emitir: Opcode#sacar
        finsi

        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoLiteralNumérica
        yo#emisor#emitir: Opcode#empujarNúmero, ast#valor
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoLiteralTextual
        yo#emisor#emitir: Opcode#empujarTexto, ast#valor
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoEnviarMensaje
        variable proto
        yo#emitir: ast#objeto
        ParaCadaElemento: ast#argumentos, funcion: arg
            yo#emitir: arg#expresión
        finfuncion
        fijar proto a Mapear: ast#argumentos, funcion: arg
            devolver arg#esVariadic
        finfuncion
        yo#emisor#emitir: Opcode#enviarMensaje, ast#mensaje, proto
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoFunciónAnónima
        variables sub, caps, emisor, func, paramsSinVariadic, tieneVariadic
        fijar emisor a Emisor#subEmisor: yo#emisor
        fijar caps a ObtenerCapturasYLocales: ast, yo#tablasMcAst, emisor
        fijar sub a yo#subestado: emisor, caps#locales, caps#capturas

        fijar paramsSinVariadic a 0
        fijar tieneVariadic a FALSO
        ParaCadaElemento: ast#parámetros, procedimiento: param
            si param#esVariadic
                fijar tieneVariadic a VERDADERO
            sino
                fijar paramsSinVariadic a paramsSinVariadic + 1
            finsi
        finprocedimiento
        sub#emisor#emitir: Opcode#params, paramsSinVariadic, tieneVariadic

        ParaCadaElemento: ast#parámetros, procedimiento: param
            sub#prepararDeclaración: param#identificador
        finprocedimiento

        ParaCadaElementoEnReversaConÍndice: ast#parámetros, procedimiento: param, i
            si param#esVariadic
                sub#emisor#emitir: Opcode#variadic, i
            finsi
            sub#inicializarVariable: param#identificador
        finprocedimiento
        sub#emitir: ast#cuerpo
        sub#emisor#emitir: Opcode#empujarNulo
        sub#emisor#emitir: Opcode#devolverN, 1

        fijar func a sub#emisor#moverAFunción
        yo#emisor#combinar: sub#emisor
        caps#capturas#paraCadaLlave: procedimiento: binding
            si yo#capturas#contiene: binding
                yo#emisor#emitir: Opcode#obtenerLocalC, (yo#capturas#en: binding)
            sino
                yo#emisor#emitir: Opcode#obtenerLocal, (yo#locales#en: binding)
            finsi
        finprocedimiento
        yo#emisor#emitir: Opcode#mkclz, func#id, caps#capturas#longitud
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoNo
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#negar
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoSonIdénticos
        yo#emitir: ast#lhs
        yo#emitir: ast#rhs
        yo#emisor#emitir: Opcode#sonIdénticos
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoBuiltin
        si ast#nombre = {objeto}
            yo#emisor#emitir: Opcode#obtenerObjeto
            devolver NULO
        finsi
        si ast#nombre = {exportar}
            yo#emisor#emitir: Opcode#empujarEspacioDeNombres
            ParaCadaElemento: ast#argumentos, procedimiento: arg
                variables binding, reg
                necesitas no arg#esVariadic
                fijar binding a yo#emitirObtenerIdentificador: arg#expresión
                fijar reg a yo#tablasRnAst#tablaNombres#buscarÚnico: {binding}, binding
                yo#emisor#emitir: Opcode#agregarNombre, arg#expresión#nombre, reg#esAutoejecutable
            finprocedimiento
            yo#emisor#emitir: Opcode#exportar
            devolver NULO
        finsi
        si ast#nombre = {obtenerRuntime}
            yo#emisor#emitir: Opcode#obtenerRuntime
            devolver NULO
        finsi
        si ast#nombre = {__Impl}
            yo#emisor#emitir: Opcode#empujarTexto, IMPL_COMPILADOR
            devolver NULO
        finsi
        Escribir: {Builtin}, ast#nombre
        NoImplementado
    finsi

    Escribir: ast
    Inalcanzable
finmetodo
