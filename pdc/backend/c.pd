utilizar bepd/builtins
utilizar bepd/datos/caja (Caja)
utilizar bepd/x/puerto/deArchivo (PuertoDeArchivoDeEscritura)
utilizar bepd/x/sistemaDeArchivos/archivo (LeerArchivo)
utilizar bepd/utilidades/arreglo (Únicos)
utilizar bepd/x/enum (Enum)
utilizar bepd/x/adhoc (ObjetoAdHoc)
utilizar bepd/x/puerto (SalidaEstándar)

utilizar pdc/cst como CST
utilizar pdc/ast como AST
utilizar pdc/tabla (CrearTipoDeRegistro, Tabla, NodoDeÁrbol, EntablarÁrbol, EscribirTabla)
utilizar pdc/combinadores (Error)
utilizar pdc/parser (ErrorComoTraceback, CrearCST)
utilizar pdc/validación (ValidaLlamadasAutoejecutables, ValidaDevolverFueraDeFunción)
utilizar pdc/nombres (NombreResuelto, UsoDeNombre, DefiniciónDeNombre, Ámbitos, TablasDeResoluciónDeNombres, ResolverNombres, Ámbito)
utilizar pdc/catamorfismos (Buscando)
utilizar pdc/abstraer (Abstraer)
utilizar pdc/capturas (EsCapturada, CapturasDeFunción, LocalesDeFunción, TablasDeCapturas, MarcarCapturas)
utilizar pdc/backend/c/ir (Opcode, FunciónIR, Etiqueta, ContinuaciónIR, ProgramaIR, EscribirPrograma)
utilizar pdc/backend/c/lowerer (CompilarPrograma)


clase Emisor
    atributos cabecera, instrucciones
    atributos idDeContinuaciónActual
    atributos funciones, continuaciones
    atributos idDeFunción, idDeContinuación

    metodo emitir: opcode, ...args
    metodo moverAFunción
    metodo combinar: subEmisor
    metodo ajustarEtiqueta: etiqueta
finclase

metodo estatico Emisor#subEmisor: emisorPadre
    variable c
    fijar c a yo#crear
    fijar c#continuaciones a emisorPadre#continuaciones
    fijar c#idDeFunción a emisorPadre#idDeFunción
    fijar c#idDeContinuación a emisorPadre#idDeContinuación
    devolver c
finmetodo

metodo Emisor#inicializar
    fijar yo#instrucciones a Arreglo#vacio
    fijar yo#cabecera a yo#instrucciones
    fijar yo#funciones a Arreglo#vacio
    fijar yo#continuaciones a Arreglo#vacio
    fijar yo#idDeContinuaciónActual a NULO
    fijar yo#idDeFunción a Caja#crear: 0
    fijar yo#idDeContinuación a Caja#crear: 0
finmetodo

metodo Emisor#emitir: ...tupla
    necesitas tupla#longitud > 0
    variable opcode
    fijar opcode a tupla#en: 0
    si son diferentes opcode y Opcode#etiqueta
        yo#instrucciones#agregarAlFinal: tupla
    finsi
    si opcode#requiereContinuación
        variable k
        fijar k a ContinuaciónIR#crear: Arreglo#vacio
        fijar k#id a yo#idDeContinuación#valor
        fijar yo#idDeContinuaciónActual a k#id
        fijar yo#idDeContinuación#valor a yo#idDeContinuación#valor + 1
        si opcode = Opcode#etiqueta
            yo#instrucciones#agregarAlFinal: (Arreglo#crearCon: Opcode#continuar, k#id)
        finsi
        tupla#agregarAlFinal: k#id
        fijar yo#instrucciones a k#instrucciones
        yo#continuaciones#agregarAlFinal: k
    finsi
finmetodo

metodo Emisor#moverAFunción
    variable func
    fijar func a FunciónIR#crear: yo#cabecera
    fijar func#id a yo#idDeFunción#valor
    fijar yo#idDeFunción#valor a yo#idDeFunción#valor + 1
    yo#funciones#agregarAlFinal: func
    fijar yo#instrucciones a Arreglo#vacio
    fijar yo#cabecera a yo#instrucciones
    fijar yo#idDeContinuaciónActual a NULO
    devolver func
finmetodo

metodo Emisor#moverAPrograma
    variable funcPrincipal
    fijar funcPrincipal a yo#moverAFunción
    devolver ProgramaIR#crear: funcPrincipal#id, yo#funciones, yo#continuaciones
finmetodo

metodo Emisor#combinar: subEmisor
    ParaCadaElemento: subEmisor#funciones, procedimiento: func
        yo#funciones#agregarAlFinal: func
    finprocedimiento
finmetodo

metodo Emisor#ajustarEtiqueta: etiqueta
    yo#emitir: Opcode#etiqueta, etiqueta
    fijar etiqueta#id a yo#idDeContinuaciónActual
finmetodo


procedimiento EscribirEmisor: emisor
    procedimiento escribirInstrucciones: pref, instrs
        ParaCadaElemento: instrs, procedimiento: instr
            escribir pref#comoTexto
            escribir {    }
            escribir (instr#en: 0)#nombre
            ParaCadaNúmero: 1, instr#longitud, procedimiento: i
                escribir {	}
                escribir (instr#en: i)#comoTexto
            finprocedimiento
            nl
        finprocedimiento
    finprocedimiento

    Escribir: {.instrucciones}
    escribirInstrucciones: {}, emisor#cabecera
    Escribir: {.funciones}
    ParaCadaElemento: emisor#funciones, procedimiento: func
        Escribir: {  .func}, func#id
        escribirInstrucciones: {  }, func#instrucciones
    finprocedimiento
    Escribir: {.continuaciones}
    ParaCadaElemento: emisor#continuaciones, procedimiento: k
        Escribir: {  .cont}, k#id
        escribirInstrucciones: {  }, k#instrucciones
    finprocedimiento
finprocedimiento


procedimiento ParaCadaElementoEnReversaConÍndice: arr, proc
    ParaCadaNúmero: 0, arr#longitud, procedimiento: i
        variable j
        fijar j a (arr#longitud - 1) - i
        devolver %proc: (arr#en: j), j
    finprocedimiento
finprocedimiento


clase EstadoDeEmisión
    atributos tablasRnAst, tablasMcAst, emisor, locales, capturas
finclase

metodo estatico EstadoDeEmisión#inicial: tablasRnAst, tablasMcAst, emisor
    devolver yo#crear: tablasRnAst, tablasMcAst, emisor
finmetodo

metodo EstadoDeEmisión#inicializar: tablasRnAst, tablasMcAst, emisor
    fijar yo#tablasRnAst a tablasRnAst
    fijar yo#tablasMcAst a tablasMcAst
    fijar yo#emisor a emisor
    fijar yo#locales a Diccionario#vacío
    fijar yo#capturas a Diccionario#vacío
finmetodo

metodo EstadoDeEmisión#emitirFijarIdentificador: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaUsos#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaDefiniciones#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi
    si EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarLocal, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarLocalC, (yo#capturas#en: reg#binding)
        finsi
    sino
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarCaja, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarCajaC, (yo#capturas#en: reg#binding)
        finsi
    finsi
    devolver reg#binding
finmetodo

metodo EstadoDeEmisión#emitirObtenerIdentificador: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaUsos#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaDefiniciones#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi
    si EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#obtenerLocal, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#obtenerLocalC, (yo#capturas#en: reg#binding)
        finsi
    sino
        si yo#locales#contiene: reg#binding
            yo#emisor#emitir: Opcode#obtenerCaja, (yo#locales#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#obtenerCajaC, (yo#capturas#en: reg#binding)
        finsi
    finsi
    devolver reg#binding
finmetodo

metodo EstadoDeEmisión#subestado: emisor, locales, capturas
    variable sub
    fijar sub a EstadoDeEmisión#crear
    fijar sub#tablasRnAst a yo#tablasRnAst
    fijar sub#tablasMcAst a yo#tablasMcAst
    fijar sub#emisor a emisor
    fijar sub#locales a locales
    fijar sub#capturas a capturas
    devolver sub
finmetodo

funcion ObtenerCapturasYLocales: nodoConCapturas, tablasMcAst, emisor
    variables reg, locales, capturas, sub

    fijar reg a tablasMcAst#tablaCapturas#buscarÚnico: {idNodo}, nodoConCapturas#id
    fijar capturas a Diccionario#vacío
    ParaCadaElementoConÍndice: reg#bindingsCapturados, procedimiento: binding, i
        capturas#fijarEn: binding, i
    finprocedimiento
    emisor#emitir: Opcode#capturas, reg#bindingsCapturados#longitud

    fijar reg a tablasMcAst#tablaLocales#buscarÚnico: {idNodo}, nodoConCapturas#id
    fijar locales a Diccionario#vacío
    ParaCadaElementoConÍndice: reg#bindingsLocales, procedimiento: binding, i
        locales#fijarEn: binding, i
    finprocedimiento
    emisor#emitir: Opcode#locales, reg#bindingsLocales#longitud

    devolver ObjetoAdHoc: {locales}, locales,
                          {capturas}, capturas
finfuncion

metodo EstadoDeEmisión#inicializarVariable: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaDefiniciones#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaUsos#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi

    si no EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        si yo#capturas#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarCajaC, (yo#capturas#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarCaja, (yo#locales#en: reg#binding)
        finsi
    sino
        si yo#capturas#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarLocalC, (yo#capturas#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarLocal, (yo#locales#en: reg#binding)
        finsi
    finsi
finmetodo

metodo EstadoDeEmisión#prepararDeclaración: nodoIdentificador
    variable reg
    fijar reg a yo#tablasRnAst#tablaDefiniciones#intentaBuscarÚnico: {idNodo}, nodoIdentificador#id
    si EsNulo: reg
        fijar reg a yo#tablasRnAst#tablaUsos#buscarÚnico: {idNodo}, nodoIdentificador#id
    finsi

    si no EsNulo: yo#tablasMcAst#tablaEsCapturada#intentaBuscarÚnico: {binding}, reg#binding
        [ La variable es capturada, necesitamos inicializarla a una caja vacía ]
        yo#emisor#emitir: Opcode#empujarNulo
        yo#emisor#emitir: Opcode#caja
        si yo#capturas#contiene: reg#binding
            yo#emisor#emitir: Opcode#fijarLocalC, (yo#capturas#en: reg#binding)
        sino
            yo#emisor#emitir: Opcode#fijarLocal, (yo#locales#en: reg#binding)
        finsi
    finsi
finmetodo

metodo EstadoDeEmisión#emitir: ast
    si EsInstancia: ast, AST#NodoBloque
        ParaCadaElemento: ast#cuerpo, procedimiento: nodo
            si EsInstancia: nodo, AST#NodoVariable
                yo#prepararDeclaración: nodo#nombre
            finsi
        finprocedimiento
        ParaCadaElemento: ast#cuerpo, &(yo#emitir)
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoPrograma
        variables sub, caps
        fijar caps a ObtenerCapturasYLocales: ast, yo#tablasMcAst, yo#emisor
        fijar sub a yo#subestado: yo#emisor, caps#locales, caps#capturas
        sub#emitir: ast#cuerpo
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoIdentificador
        [ Solo maneja los usos de un nombre. Las definiciones son manejadas manualmente ]
        yo#emitirObtenerIdentificador: ast
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoVariable
        yo#emisor#emitir: Opcode#empujarNulo
        yo#inicializarVariable: ast#nombre
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoFijar
        yo#emitir: ast#expresión
        yo#emitirFijarIdentificador: ast#objetivo
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoEscribir
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#prn
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoNl
        yo#emisor#emitir: Opcode#prnl
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoNecesitas
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#assert
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoDevolver
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#devolverN, 1
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoSi
        variable etqSino, etqFinsi
        fijar etqSino a Etiqueta#vacía
        fijar etqFinsi a Etiqueta#vacía

        yo#emitir: ast#condición
        yo#emisor#emitir: Opcode#csaltar, etqSino
        yo#emitir: ast#cuerpoSiVerdadero
        yo#emisor#emitir: Opcode#saltar, etqFinsi
        yo#emisor#ajustarEtiqueta: etqSino
        yo#emitir: ast#cuerpoSiFalso
        yo#emisor#ajustarEtiqueta: etqFinsi
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoMientras
        variable etqInicio, etqFinmientras
        fijar etqInicio a Etiqueta#vacía
        fijar etqFinmientras a Etiqueta#vacía

        yo#emisor#ajustarEtiqueta: etqInicio
        yo#emitir: ast#condición
        yo#emisor#emitir: Opcode#csaltar, etqFinmientras
        yo#emitir: ast#cuerpo
        yo#emisor#emitir: Opcode#saltar, etqInicio
        yo#emisor#ajustarEtiqueta: etqFinmientras
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoUtilizar
        NoImplementado
    finsi

    si EsInstancia: ast, AST#NodoLiteralNumérica
        yo#emisor#emitir: Opcode#empujarNúmero, ast#valor
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoLiteralTextual
        yo#emisor#emitir: Opcode#empujarTexto, ast#valor
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoEnviarMensaje
        variable proto
        yo#emitir: ast#objeto
        ParaCadaElemento: ast#argumentos, funcion: arg
            yo#emitir: arg#expresión
        finfuncion
        fijar proto a Mapear: ast#argumentos, funcion: arg
            devolver arg#esVariadic
        finfuncion
        yo#emisor#emitir: Opcode#enviarMensaje, ast#mensaje, proto
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoFunciónAnónima
        variables sub, caps, emisor, func, paramsSinVariadic, tieneVariadic
        fijar emisor a Emisor#subEmisor: yo#emisor
        fijar caps a ObtenerCapturasYLocales: ast, yo#tablasMcAst, emisor
        fijar sub a yo#subestado: emisor, caps#locales, caps#capturas

        fijar paramsSinVariadic a 0
        fijar tieneVariadic a FALSO
        ParaCadaElemento: ast#parámetros, procedimiento: param
            si param#esVariadic
                fijar tieneVariadic a VERDADERO
            sino
                fijar paramsSinVariadic a paramsSinVariadic + 1
            finsi
        finprocedimiento
        sub#emisor#emitir: Opcode#params, paramsSinVariadic, tieneVariadic

        ParaCadaElementoEnReversaConÍndice: ast#parámetros, procedimiento: param, i
            si param#esVariadic
                sub#emisor#emitir: Opcode#variadic, i
            finsi
            sub#inicializarVariable: param#identificador
        finprocedimiento
        sub#emitir: ast#cuerpo
        sub#emisor#emitir: Opcode#empujarNulo
        sub#emisor#emitir: Opcode#devolverN, 1

        fijar func a sub#emisor#moverAFunción
        yo#emisor#combinar: sub#emisor
        caps#capturas#paraCadaLlave: procedimiento: binding
            si yo#capturas#contiene: binding
                yo#emisor#emitir: Opcode#obtenerLocalC, (yo#capturas#en: binding)
            sino
                yo#emisor#emitir: Opcode#obtenerLocal, (yo#locales#en: binding)
            finsi
        finprocedimiento
        yo#emisor#emitir: Opcode#mkclz, func#id, caps#capturas#longitud
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoNo
        yo#emitir: ast#expresión
        yo#emisor#emitir: Opcode#negar
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoSonIdénticos
        yo#emitir: ast#lhs
        yo#emitir: ast#rhs
        yo#emisor#emitir: Opcode#sonIdénticos
        devolver NULO
    finsi

    si EsInstancia: ast, AST#NodoBuiltin
        si ast#nombre = {objeto}
            yo#emisor#emitir: Opcode#obtenerObjeto
            devolver NULO
        finsi
        si ast#nombre = {exportar}
            yo#emisor#emitir: Opcode#empujarEspacioDeNombres
            ParaCadaElemento: ast#argumentos, procedimiento: arg
                variables binding, reg
                necesitas no arg#esVariadic
                fijar binding a yo#emitirObtenerIdentificador: arg#expresión
                fijar reg a yo#tablasRnAst#tablaNombres#buscarÚnico: {binding}, binding
                yo#emisor#emitir: Opcode#agregarNombre, arg#expresión#nombre, reg#esAutoejecutable
            finprocedimiento
            yo#emisor#emitir: Opcode#exportar
            devolver NULO
        finsi
        Escribir: {Builtin}, ast#nombre
        NoImplementado
    finsi

    Escribir: ast
    Inalcanzable
finmetodo


variables T, A, S, cst, tablaCst, ast, tablaAst, tablaNombres, parches,
          tablasRnCst, tablasRnAst, tablaEsCap, tablaCaps, tablaLoc, fin
fijar A a __Argv#en: 0
fijar S a __Argv#en: 1
fijar T a LeerArchivo: A

fijar parches a Arreglo#vacio

fijar tablaNombres a Tabla#vacíaConEsquema: NombreResuelto

fijar tablasRnCst a TablasDeResoluciónDeNombres#crear
fijar tablasRnCst#tablaNombres a tablaNombres
fijar tablasRnCst#tablaUsos a Tabla#vacíaConEsquema: UsoDeNombre
fijar tablasRnCst#tablaDefiniciones a Tabla#vacíaConEsquema: DefiniciónDeNombre
fijar tablasRnCst#tablaÁmbitos a Tabla#vacíaConEsquema: Ámbitos

fijar tablasRnAst a TablasDeResoluciónDeNombres#crear
fijar tablasRnAst#tablaNombres a tablaNombres
fijar tablasRnAst#tablaUsos a Tabla#vacíaConEsquema: UsoDeNombre
fijar tablasRnAst#tablaDefiniciones a Tabla#vacíaConEsquema: DefiniciónDeNombre
fijar tablasRnAst#tablaÁmbitos a Tabla#vacíaConEsquema: Ámbitos

fijar cst a CrearCST: T, A
fijar tablaCst a EntablarÁrbol: cst
fijar fin a Arreglo#vacio
ResolverNombres: cst, tablasRnCst, (Ámbito#inicial: tablaNombres), fin
ParaCadaElemento: fin, (MétodoComoFunción: {llamar})
ValidaLlamadasAutoejecutables: cst, tablasRnCst

fijar ast a Abstraer: cst, tablasRnCst, tablasRnAst, parches, NULO
fijar tablaAst a EntablarÁrbol: ast
ParaCadaElemento: parches, (MétodoComoFunción: {llamar})
ValidaDevolverFueraDeFunción: ast

variables pos, def, tablasMcAst
fijar pos a Diccionario#vacío
fijar def a Arreglo#vacio
fijar tablaEsCap a Tabla#vacíaConEsquema: EsCapturada
fijar tablaCaps a Tabla#vacíaConEsquema: CapturasDeFunción
fijar tablaLoc a Tabla#vacíaConEsquema: LocalesDeFunción
fijar tablasMcAst a TablasDeCapturas#crear
fijar tablasMcAst#tablaLocales a tablaLoc
fijar tablasMcAst#tablaCapturas a tablaCaps
fijar tablasMcAst#tablaEsCapturada a tablaEsCap
MarcarCapturas: ast, tablasRnAst, tablasMcAst, pos, def

Escribir: ast
Escribir: { AST ================================================== }
EscribirTabla: tablaAst
Escribir: { NOMS ================================================== }
EscribirTabla: tablaNombres
Escribir: { USOS AST ================================================== }
EscribirTabla: tablasRnAst#tablaUsos
Escribir: { DEFS AST ================================================== }
EscribirTabla: tablasRnAst#tablaDefiniciones
Escribir: { AMB AST ================================================== }
EscribirTabla: tablasRnAst#tablaÁmbitos
Escribir: { ESCAP ================================================== }
EscribirTabla: tablaEsCap
Escribir: { CAPS ================================================== }
EscribirTabla: tablaCaps
Escribir: { LOCS ================================================== }
EscribirTabla: tablaLoc

variables emisor, estado, programa
fijar emisor a Emisor#crear
fijar estado a EstadoDeEmisión#inicial: tablasRnAst, tablasMcAst, emisor
estado#emitir: ast
fijar programa a estado#emisor#moverAPrograma

[ EscribirPrograma: programa ]
variable salida
fijar salida a PuertoDeArchivoDeEscritura#abrir: S
CompilarPrograma: salida, {mod}, programa
salida#cerrar
