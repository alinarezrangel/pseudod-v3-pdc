utilizar bepd/builtins
utilizar bepd/x/sistemaDeArchivos/archivo (LeerArchivo)
utilizar bepd/x/datos (TipoDeDatos)
utilizar bepd/x/puerto/deArchivo (PuertoDeArchivoDeLectura, PuertoDeArchivoDeEscritura)
utilizar bepd/x/json (DesdeJSON, ComoJSON)

utilizar pdc/tabla (CrearTipoDeRegistro, Tabla, Índice, EscribirTabla)


[DOCUMENTA
@brief{Un valor exportado desde un módulo.}

@itemlist(
@item{@code{nombre}: Nombre de la exportación.}

@item{@code{esAutoejecutable}: Si es autoejecutable o no.}
)
DOCUMENTA]
variable Exportación
fijar Exportación a TipoDeDatos: {Exportación}, {nombre}, {esAutoejecutable}

[DOCUMENTA
@brief{Módulo de PseudoD.}

@itemlist(
@item{@code{id}: ID del módulo. Solo es usado internamente por el compilador y
no es guardado en los archivos de interfáz de módulo.}

@item{@code{paquete}: Nombre del paquete.}

@item{@code{módulo}: Nombre del módulo.}

@item{@code{exportaciones}: Arreglo de @pd{Exportación} con las exportaciones
del módulo.}

@item{@code{prefijoDelMódulo}: Prefijo del módulo para el linker.}

@item{@code{compilado}: Objeto con todos los datos resultantes de la
compilación. Su tipo específico depende del backend que compiló el módulo.}

@item{@code{archivoConElCompilado}: Archivo con la salida de la compilación.}

@item{@code{prefijosDeLosMódulosTransitivos}: Arreglo con los prefijos de todos
los módulos que son dependencias de este. Es utilizado por el lowerer para
precargar los módulos del programa.}
)
DOCUMENTA]
variable Módulo
fijar Módulo a CrearTipoDeRegistro: {Módulo},
    {id}, {paquete}, {módulo}, {exportaciones},
    {prefijoDelMódulo}, {compilado}, {archivoConElCompilado},
    {prefijosDeLosMódulosTransitivos},
    (Índice#ÚNICO: {id}),
    (Índice#ORDENADO: {paquete}),
    (Índice#ORDENADO: {paquete}, {módulo})


[DOCUMENTA
@brief{Base de datos de módulos.}

Contiene la tabla de @pd{Módulo}s. Almacena, busca y guarda la base de datos.
DOCUMENTA]
clase BaseDeDatosDeMódulos
    [DOCUMENTA
    @brief{Carga la base de datos desde un archivo.}
    DOCUMENTA]
    metodo estatico desdeArchivo: archivo

    [DOCUMENTA
    @brief{Crea una base de datos vacía.}
    DOCUMENTA]
    metodo estatico enMemoria

    [DOCUMENTA
    @brief{Obtiene la tabla de @pd{Módulo}s.}
    DOCUMENTA]
    metodo tablaMódulos

    [DOCUMENTA
    @brief{Carga un archivo, agregando sus módulos a la base de datos.}
    DOCUMENTA]
    metodo cargarDesdeArchivo: archivo

    [DOCUMENTA
    @brief{Guarda la base de datos en un archivo.}
    DOCUMENTA]
    metodo guardarEnArchivo: archivo

    [DOCUMENTA
    @brief{Agrega un nuevo módulo a la base de datos.}

    Construye un @pd{Módulo} con los argumentos dados.
    DOCUMENTA]
    metodo agregarMódulo: paquete, módulo, exportaciones, prefijoDelMódulo, compilado, archivoConElCompilado, prefijosDeLosMódulosTransitivos

    [DOCUMENTA
    @brief{Intenta buscar un módulo en base a su paquete y nombre.}

    Si el módulo dado no existe, devuelve @pd{NULO}.
    DOCUMENTA]
    metodo intentaBuscarMódulo: paquete, nombre

    [DOCUMENTA
    @brief{Busca un módulo desde su paquete y nombre.}

    Si el módulo no es encontrado, falla con un error.
    DOCUMENTA]
    metodo buscarMódulo: paquete, nombre
finclase

atributo BaseDeDatosDeMódulos#tablaMódulos, BaseDeDatosDeMódulos#_contadorId

metodo estatico BaseDeDatosDeMódulos#desdeArchivo: archivo
    variable inst
    fijar inst a yo#enMemoria
    inst#cargarDesdeArchivo: archivo
    devolver inst
finmetodo

metodo estatico BaseDeDatosDeMódulos#enMemoria
    devolver yo#crear: (Tabla#vacíaConEsquema: Módulo)
finmetodo

metodo BaseDeDatosDeMódulos#inicializar: tabla
    fijar yo#tablaMódulos a tabla
    fijar yo#_contadorId a 0
finmetodo

metodo BaseDeDatosDeMódulos#cargarDesdeArchivo: archivo
    variables puerto, json, v
    fijar puerto a PuertoDeArchivoDeLectura#desdeArchivo: archivo
    fijar json a DesdeJSON: puerto
    si json#esError
        __FallarConMensaje: json#error
    finsi
    fijar json a json#valor
    fijar v a json#en: {versión}
    si v = 1
        yo#_cargarDesdeArchivoV1: json
    sino
        __FallarConMensaje: ({No se pudo cargar la base de datos con la versión ~t}#formatear: v)
    finsi
finmetodo

metodo BaseDeDatosDeMódulos#_cargarDesdeArchivoV1: json
    variable módulos
    fijar módulos a json#en: "módulos"
    ParaCadaElemento: módulos, procedimiento: módulo
        variable paquete, nombre, exportaciones, prefijo, archivo, prefijos
        fijar paquete a módulo#en: {paquete}
        fijar nombre a módulo#en: {módulo}
        fijar exportaciones a Mapear: (módulo#en: {exportaciones}), funcion: exp
            devolver Exportación#crear: (exp#en: {nombre}), (exp#en: {esAutoejecutable})
        finfuncion
        fijar prefijo a módulo#en: {prefijoDelMódulo}
        fijar archivo a módulo#en: {archivoConElCompilado}
        fijar prefijos a módulo#en: {prefijosDeLosMódulosTransitivos}
        yo#agregarMódulo: paquete, nombre, exportaciones, prefijo, NULO, archivo, prefijos
    finprocedimiento
finmetodo

metodo BaseDeDatosDeMódulos#guardarEnArchivo: archivo
    variables puerto, mods, res
    fijar puerto a PuertoDeArchivoDeEscritura#desdeArchivo: archivo
    fijar mods a Arreglo#vacio
    yo#tablaMódulos#escaneoLineal: procedimiento: mod
        mods#agregarAlFinal: (Diccionario#desdePares:
            {paquete}, mod#paquete,
            {módulo}, mod#módulo,
            {exportaciones}, (Mapear: mod#exportaciones, funcion: exp
                    devolver Diccionario#desdePares:
                        {nombre}, exp#nombre,
                        {esAutoejecutable}, exp#esAutoejecutable
                finfuncion),
            {prefijoDelMódulo}, mod#prefijoDelMódulo,
            {archivoConElCompilado}, mod#archivoConElCompilado,
            {prefijosDeLosMódulosTransitivos}, mod#prefijosDeLosMódulosTransitivos)
    finprocedimiento
    fijar res a ComoJSON: puerto, (Diccionario#desdePares:
        {versión}, 1,
        {módulos}, mods)
    si res#esError
        __FallarConMensaje: res#error
    finsi
finmetodo

metodo BaseDeDatosDeMódulos#agregarMódulo: paquete, módulo, exportaciones, prefijoDelMódulo, compilado, archivoConElCompilado, prefijosDeLosMódulosTransitivos
    variable módulos
    fijar módulos a yo#tablaMódulos#buscarOrdenado: {paquete}, paquete, {módulo}, módulo
    si módulos#longitud > 0
        __FallarConMensaje: ({No se puede registrar el módulo ~t::~t: ya existe}#formatear: paquete, módulo)
    finsi
    variable id
    fijar id a yo#_generarId
    yo#tablaMódulos#agregar:
        (Módulo#crear: id,
                       paquete,
                       módulo,
                       exportaciones,
                       prefijoDelMódulo,
                       compilado,
                       archivoConElCompilado,
                       prefijosDeLosMódulosTransitivos)
    devolver id
finmetodo

metodo BaseDeDatosDeMódulos#_generarId
    fijar yo#_contadorId a yo#_contadorId + 1
    devolver yo#_contadorId
finmetodo

metodo BaseDeDatosDeMódulos#intentaBuscarMódulo: paquete, nombre
    variable módulos
    fijar módulos a yo#tablaMódulos#buscarOrdenado: {paquete}, paquete, {módulo}, nombre
    si módulos#longitud = 1
        devolver módulos#en: 0
    sino
        devolver NULO
    finsi
finmetodo

metodo BaseDeDatosDeMódulos#buscarMódulo: paquete, nombre
    variable mod
    fijar mod a yo#intentaBuscarMódulo: paquete, nombre
    si EsNulo: mod
        __FallarConMensaje: ({No se encontró el módulo ~t::~t}#formatear: paquete, nombre)
    finsi
    devolver mod
finmetodo
