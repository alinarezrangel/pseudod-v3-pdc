utilizar bepd/builtins
utilizar bepd/x/enum (Enum)
utilizar bepd/utilidades/texto (Unir, Partir, TextoMenorQue)
utilizar bepd/utilidades/arreglo (ClonarSuperficialmente, Insertar)
utilizar bepd/algoritmos (OrdenarConComparación, BúsquedaBinariaConComparación)

[DOCUMENTA
@brief{Tipo de índice sobre una columna en la tabla.}

Puede ser:

@itemlist(
@item{@code{ÚNICO}: Índice único. Solo puede haber una fila con cada valor.}

@item{@code{ORDENADO}: Índice general. Pueden haber muchas filas con cada
valor.}
)
DOCUMENTA]
variable TipoDeÍndice
fijar TipoDeÍndice a Enum: {TipoDeÍndice},
    {ÚNICO},
    {ORDENADO}

[DOCUMENTA
@brief{Tabla relacional de valores.}

La tabla es una sequencia sin órden de valores conocidos como los registros. La
diferencia entre una tabla y un arreglo es que la tabla puede @italic{indexar}
estos registros: al poner un índice sobre el campo @code{x}, podrás buscar
valores de @code{x} sin tener que inspeccionar todos los registros de la tabla
(puedes imaginar un índice como un diccionario, mapeando todos los valores a
sus respectivos registros).

Para saber que campos son indexados y cuales no, la tabla utiliza un
@italic{esquema}. Este esquema sabe que campos son indexados en cada registro.
DOCUMENTA]
clase Tabla
    [DOCUMENTA
    @brief{Obtén el esquema de esta tabla.}
    DOCUMENTA]
    metodo esquema

    [DOCUMENTA
    @brief{Crea una tabla vacía con el esquema dado.}

    La tabla no tendrá ningún registro.
    DOCUMENTA]
    metodo estatico vacíaConEsquema: esquema

    [DOCUMENTA
    @brief{Agrega un registro a la tabla.}
    DOCUMENTA]
    metodo agregar: registro

    [DOCUMENTA
    @brief{Intenta buscar un registro usando un índice.}

    Trata de obtener el registro cuyo @pd{campo} (un @pd{Texto}) tiene el
    @pd{valor} dado. El campo debe ser indexado. Si se encuentra tal registro,
    devuelve @pd{NULO}.

    Por ejemplo:

    @codeblock|{
    variables tabla, esquema
    fijar esquema a CrearTipoDeRegistro: {esquema},
        {nombre}, {valor},
        (Índice#ÚNICO: {nombre})
    fijar tabla a Tabla#vacíaConEsquema: esquema
    tabla#agregar: (esquema#crear: {nombre}, {hola}, {valor}, 1)
    tabla#agregar: (esquema#crear: {nombre}, {adios}, {valor}, 2)
    tabla#agregar: (esquema#crear: {nombre}, {mundo}, {valor}, 3)
    necesitas (tabla#intentaBuscarÚnico: {nombre}, {hola})#valor = 1
    necesitas (tabla#intentaBuscarÚnico: {nombre}, {adios})#valor = 2
    necesitas (tabla#intentaBuscarÚnico: {nombre}, {mundo})#valor = 3
    necesitas EsNulo: (tabla#intentaBuscarÚnico: {nombre}, {hola mundo})
    }|
    DOCUMENTA]
    metodo intentaBuscarÚnico: campo, valor

    [DOCUMENTA
    @brief{Busca un registro usando un índice.}

    Es como @code{#intentaBuscarÚnico}, pero si el registro buscado no es
    encontrado lanza un error en vez de devolver @pd{NULO}.
    DOCUMENTA]
    metodo buscarÚnico: campo, valor

    [DOCUMENTA
    @brief{Busca varios registros usando un índice.}

    Trata de obtener el registro cuyos campos (todos @pd{Texto}s) tienen los
    valores dados. Los campos consisten de @pd{campo} y los valores de
    @pd{valor}. @pd{camposYValores} deben ser campos y valores adicionales,
    alternandose. Por ejemplo: para buscar un registro con los campos @code{A}
    y @code{B} con los valores @code{1} y @code{2} utilizarías
    @pd|{tabla#buscarOrdenado: {A}, 1, {B}, 2}|.

    Devuelve un arreglo con los registros encontrados. El arreglo estará vacío
    si no se encontró ningún registro.
    DOCUMENTA]
    metodo buscarOrdenado: campo, valor, ...camposYValores

    [DOCUMENTA
    @brief{Inspecciona todos los registros de la tabla.}

    Llama a @pd{f} de la forma @pd{%f: registro} con cada registro de la
    tabla. El orden no está especificado y @bold{no es necesariamente el orden
    de inserción}.
    DOCUMENTA]
    metodo escaneoLineal: f
finclase

atributos Tabla#índicesÚnicos, Tabla#índicesOrdenados,
          Tabla#valores, Tabla#esquema

[ Los índices ordenados son arreglos de tuplas. Cada tupla tiene una llave, el
  valor del índice, y un registro, la fila de la tabla con el valor asociado. ]
clase Tupla
    atributos llave, registro

    metodo estatico crear: llave, registro

    metodo comoTexto
finclase

metodo Tupla#inicializar: llave, registro
    fijar yo#llave a llave
    fijar yo#registro a registro
finmetodo

metodo Tupla#comoTexto
    devolver {(Tupla ~t : ~t)}#formatear: yo#llave, yo#registro
finmetodo

[ Devuelve la llave (hasheable) de varias columnas. Es utilizada para mantener
  el mapeo de índices ordenables (múltiples columnas) -> arreglo de tuplas. ]
funcion LlaveDeColumnas: columnas
    variable columnas'
    fijar columnas' a ClonarSuperficialmente: columnas
    OrdenarConComparación: columnas', &TextoMenorQue
    devolver Unir: columnas', {|}
finfuncion

funcion ValoresDeColumnas: llaveDeColumnas, columnas, valores
    variables mapeo, camposLlave, res
    fijar mapeo a Diccionario#vacío
    fijar camposLlave a Partir: llaveDeColumnas, {|}
    fijar res a Arreglo#vacio
    ParaCadaElementoConÍndice: camposLlave, procedimiento: llave, i
        mapeo#fijarEn: llave, i
        res#agregarAlFinal: NULO
    finprocedimiento

    ParaCadaElementoConÍndice: columnas, procedimiento: col, i
        res#fijarEn: (mapeo#en: col), (valores#en: i)
    finprocedimiento

    devolver res
finfuncion

metodo estatico Tabla#vacíaConEsquema: esquema
    devolver yo#crear: esquema
finmetodo

metodo Tabla#inicializar: esquema
    fijar yo#esquema a esquema
    fijar yo#valores a Arreglo#vacio

    fijar yo#índicesÚnicos a Diccionario#vacío
    fijar yo#índicesOrdenados a Diccionario#vacío
    yo#esquema#paraCadaÍndice: procedimiento: tipo, columnas
        si tipo = TipoDeÍndice#ÚNICO
            variable campo
            fijar campo a columnas#en: 0
            yo#índicesÚnicos#fijarEn: campo, Diccionario#vacío
        sino
            necesitas tipo = TipoDeÍndice#ORDENADO
            yo#índicesOrdenados#fijarEn: (LlaveDeColumnas: columnas), Arreglo#vacio
        finsi
    finprocedimiento
finmetodo

funcion TuplaMenorQue: A, B
    necesitas A#llave#longitud = B#llave#longitud
    devolver LlamarConEC: procedimiento: esc
        ParaCadaElementoConÍndice: A#llave, procedimiento: subA, i
            variable subB
            fijar subB a B#llave#en: i

            necesitas (TipoDe: subA) = (TipoDe: subB)
            si EsInstancia: subA, Texto
                si TextoMenorQue: subA, subB
                    %esc: VERDADERO
                finsi
                si TextoMenorQue: subB, subA
                    %esc: FALSO
                finsi
            sino
                si subA < subB
                    %esc: VERDADERO
                finsi
                si subB < subA
                    %esc: FALSO
                finsi
            finsi
        finprocedimiento

        [ Son iguales ]
        devolver FALSO
    finprocedimiento
finfuncion

metodo Tabla#agregar: registro
    yo#valores#agregarAlFinal: registro
    yo#esquema#paraCadaÍndice: procedimiento: tipo, columnas
        si tipo = TipoDeÍndice#ÚNICO
            variable campo
            fijar campo a columnas#en: 0
            (yo#índicesÚnicos#en: campo)#fijarEn: (EnviarMensaje: registro, campo), registro
        sino
            necesitas tipo = TipoDeÍndice#ORDENADO
            variables índice, valores, tupla, i, llave
            fijar valores a Arreglo#vacio
            ParaCadaElemento: columnas, procedimiento: campo
                valores#agregarAlFinal: (EnviarMensaje: registro, campo)
            finprocedimiento
            fijar llave a LlaveDeColumnas: columnas
            fijar índice a yo#índicesOrdenados#en: llave
            fijar tupla a Tupla#crear: (ValoresDeColumnas: llave, columnas, valores), registro
            fijar i a BúsquedaBinariaConComparación: índice, 0, índice#longitud, tupla, &TuplaMenorQue
            si i#esOk
                Insertar: índice, i#valor, tupla
            sino
                Insertar: índice, i#error, tupla
            finsi
        finsi
    finprocedimiento
finmetodo

metodo Tabla#intentaBuscarÚnico: campo, valor
    variable índice
    fijar índice a yo#índicesÚnicos#en: campo
    si índice#contiene: valor
        devolver índice#en: valor
    sino
        devolver NULO
    finsi
finmetodo

metodo Tabla#buscarÚnico: campo, valor
    variable índice
    fijar índice a yo#índicesÚnicos#en: campo
    si índice#contiene: valor
        devolver índice#en: valor
    sino
        __FallarConMensaje: ({No se pudo encontrar el campo ~t con el valor ~t en la tabla ~t}#formatear: campo, valor, yo#esquema)
    finsi
finmetodo

metodo Tabla#buscarOrdenado: campo, valor, ...camposYValores
    variables columnas, valores, llaveÍndice, índice, i, valoresAsociados, tupla
    fijar columnas a Arreglo#crearCon: campo
    fijar valores a Arreglo#crearCon: valor
    ParaCadaNúmeroConPaso: 0, camposYValores#longitud, 2, procedimiento: i
        columnas#agregarAlFinal: (camposYValores#en: i)
        valores#agregarAlFinal: (camposYValores#en: (i + 1))
    finprocedimiento

    fijar llaveÍndice a LlaveDeColumnas: columnas
    fijar valoresAsociados a ValoresDeColumnas: llaveÍndice, columnas, valores
    fijar tupla a Tupla#crear: valoresAsociados, NULO
    fijar índice a yo#índicesOrdenados#en: llaveÍndice
    fijar i a BúsquedaBinariaConComparación: índice, 0, índice#longitud, tupla, &TuplaMenorQue
    si i#esOk
        [ Extrae todos los registros con los valores dados ]
        variables j, k, v
        fijar j a i#valor
        fijar k a j
        fijar v a índice#en: j

        LlamarConEC: procedimiento: salir
            mientras j >= 0
                si no (índice#en: j)#llave = v#llave
                    %salir: NULO
                finsi
                fijar j a j - 1
            finmientras
        finprocedimiento
        fijar j a j + 1

        LlamarConEC: procedimiento: salir
            mientras k < índice#longitud
                si no (índice#en: k)#llave = v#llave
                    %salir: NULO
                finsi
                fijar k a k + 1
            finmientras
        finprocedimiento

        devolver Mapear: (PedazoDeArreglo: índice, j, k), funcion: tupla
            devolver tupla#registro
        finfuncion
    sino
        devolver Arreglo#vacio
    finsi
finmetodo

metodo Tabla#escaneoLineal: f
    ParaCadaElemento: yo#valores, f
finmetodo

clase Índice
    metodo tipo
    metodo columnas

    metodo estatico ÚNICO: columna
    metodo estatico ORDENADO: ...columnas
finclase

atributos Índice#tipo, Índice#columnas

metodo estatico Índice#ÚNICO: columna
    devolver yo#crear: TipoDeÍndice#ÚNICO, (Arreglo#crearCon: columna)
finmetodo

metodo estatico Índice#ORDENADO: ...columnas
    devolver yo#crear: TipoDeÍndice#ORDENADO, columnas
finmetodo

metodo Índice#inicializar: tipo, columnas
    fijar yo#tipo a tipo
    fijar yo#columnas a columnas
finmetodo

[DOCUMENTA
@brief{Crea un tipo de registro para usarse junto a una @pd{Tabla}.}

Devuelve una nueva clase, de nombre @pd{nombre} (un @pd{Texto}).

@pd{columnasEÍndices} deben ser una secuencia de @pd{Texto}s con los nombres de
las columnas, seguido de cero o más índices de la tabla.

Por ejemplo:

@codeblock|{
variable Usuario
fijar Usuario a CrearTipoDeRegistro: {Usuario},
    {nombre}, {contraseña}, {email}, {biografía}, {esPúblico},
    (Índice#ÚNICO: {nombre}),
    (Índice#ÚNICO: {email})
}|

La clase devuelta tendrá un constructor que acepta valores para su
inicialización:

@codeblock|{
variable miguel
fijar miguel a Usuario#crear:
    {mg},
    {abc123},
    {miguel@example.com},
    {¡Hola a todos!},
    VERDADERO
}|

Tu puedes crear tus propios métodos adicionales:

@codeblock|{
metodo Usuario#referencia
    devolver {@~t}#formatear: yo#nombre
finmetodo
}|
DOCUMENTA]
funcion CrearTipoDeRegistro: nombre, ...columnasEÍndices
    variables campos, índices, i
    fijar campos a Arreglo#vacio
    fijar índices a Arreglo#vacio
    ParaCadaElemento: columnasEÍndices, procedimiento: columnaOÍndice
        si EsInstancia: columnaOÍndice, Texto
            campos#agregarAlFinal: columnaOÍndice
        sino
            índices#agregarAlFinal: columnaOÍndice
        finsi
    finprocedimiento

    clase TipoDeRegistro
        metodo estatico paraCadaÍndice: f
        metodo estatico paraCadaCampo: f
    finclase

    fijar TipoDeRegistro#nombre a nombre

    ParaCadaElemento: campos, procedimiento: campo
        TipoDeRegistro#agregarAtributo: campo
    finprocedimiento

    metodo estatico TipoDeRegistro#paraCadaÍndice: f
        ParaCadaElemento: índices, procedimiento: índice
            %f: índice#tipo, índice#columnas
        finprocedimiento
    finmetodo

    metodo estatico TipoDeRegistro#paraCadaCampo: f
        ParaCadaElemento: campos, procedimiento: campo
            %f: campo
        finprocedimiento
    finmetodo

    metodo TipoDeRegistro#inicializar: ...valores
        ParaCadaElementoConÍndice: campos, procedimiento: campo, i
            EnviarMensaje: yo, ({fijar_}#concatenar: campo), (valores#en: i)
        finprocedimiento
    finmetodo

    metodo TipoDeRegistro#comoTexto
        devolver {(~t ~t)}#formatear: nombre, (Unir: (Mapear: campos, funcion: campo
            devolver (EnviarMensaje: yo, campo)#comoTexto
        finfuncion), {, })
    finmetodo

    devolver TipoDeRegistro
finfuncion

[DOCUMENTA
@brief{Tipo de registro que representa el resultado de entablar un nodo de un
árbol.}

Tiene dos campos, @code{id} (indexado) que es un número entero y @code{nodo}
(no indexado) que es el nodo con dicho id.
DOCUMENTA]
variable NodoDeÁrbol
fijar NodoDeÁrbol a CrearTipoDeRegistro: {NodoDeÁrbol},
    {id}, {nodo},
    (Índice#ÚNICO: {id})

[DOCUMENTA
@brief{Convierte un árbol en una tabla.}

Va por cada nodo del árbol (usando el método @code{#recursivo: f} que deben
tener todos los nodos) y le asocia un ID único, el cual va guardando en una
tabla de @pd{NodoDeÁrbol} y en el atributo @code{id} del mismo nodo. Devuelve
dicha tabla.
DOCUMENTA]
funcion EntablarÁrbol: árbol
    variables tabla, id
    fijar tabla a Tabla#vacíaConEsquema: NodoDeÁrbol
    fijar id a 0
    funcion asignar: nodo
        fijar nodo#id a id
        fijar id a id + 1
        tabla#agregar: (NodoDeÁrbol#crear: nodo#id, nodo)
        nodo#recursivo: &asignar
    finfuncion
    asignar: árbol
    devolver tabla
finfuncion

[DOCUMENTA
@brief{Escribe cada registro de una tabla a la salida estándar.}
DOCUMENTA]
procedimiento EscribirTabla: tabla
    tabla#esquema#paraCadaCampo: procedimiento: campo
        escribir campo
        escribir {	}
    finprocedimiento
    nl
    tabla#escaneoLineal: procedimiento: reg
        tabla#esquema#paraCadaCampo: procedimiento: campo
            escribir (EnviarMensaje: reg, campo)#comoTexto
            escribir {	}
        finprocedimiento
        nl
    finprocedimiento
    nl
finprocedimiento
