utilizar bepd/builtins

[DOCUMENTA
@brief{Un nodo del AST.}

El AST representa una versión abstracta y de alto nivel del CST, con toda la
azúcar sintáctica eliminada y muchas estructuras implícitas hechas explicitas.
DOCUMENTA]
clase Nodo
    [DOCUMENTA
    @brief{ID del nodo.}

    No necesitas especificarlo al crear un nodo, ya que @pd(#:utilizar
    "pdc/tabla"){EntablarÁrbol} le dará un valor apropiado.
    DOCUMENTA]
    atributo id

    [DOCUMENTA
    @brief{Área textual de este token.}

    Es una instancia de @pd(#:utilizar "pdc/tokens"){ÁreaTextual}.
    DOCUMENTA]
    atributo áreaTextual
finclase

[DOCUMENTA
@brief{Un bloque de instrucciones.}
DOCUMENTA]
clase NodoBloque hereda Nodo
    [DOCUMENTA
    @brief{Arreglo de instrucciones.}
    DOCUMENTA]
    atributo cuerpo
finclase

metodo NodoBloque#inicializar: área, cuerpo
    fijar yo#áreaTextual a área
    fijar yo#cuerpo a cuerpo
finmetodo

metodo NodoBloque#recursivo: f
    ParaCadaElemento: yo#cuerpo, f
finmetodo

metodo NodoBloque#comoTexto
    devolver {(NodoBloque ~t)}#formatear: yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Nodo con todo el programa.}
DOCUMENTA]
clase NodoPrograma hereda Nodo
    [DOCUMENTA
    @brief{Un @pd{NodoBloque} con el cuerpo del programa.}
    DOCUMENTA]
    atributo cuerpo
finclase

metodo NodoPrograma#inicializar: área, cuerpo
    fijar yo#áreaTextual a área
    fijar yo#cuerpo a cuerpo
finmetodo

metodo NodoPrograma#recursivo: f
    %f: yo#cuerpo
finmetodo

metodo NodoPrograma#comoTexto
    devolver {(NodoPrograma ~t)}#formatear: yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Un identificador de una variable.}
DOCUMENTA]
clase NodoIdentificador hereda Nodo
    [DOCUMENTA
    @brief{Nombre de la variable. Un @pd{Texto}.}
    DOCUMENTA]
    atributo nombre

    [DOCUMENTA
    @brief{Indica si es un uso de variable.}
    DOCUMENTA]
    atributo esUso

    [DOCUMENTA
    @brief{Indica si es una declaración de la variable.}
    DOCUMENTA]
    atributo esDeclaración
finclase

metodo NodoIdentificador#inicializar: área, nombre, esUso, esDeclaración
    fijar yo#áreaTextual a área
    fijar yo#nombre a nombre
    fijar yo#esUso a esUso
    fijar yo#esDeclaración a esDeclaración
finmetodo

metodo NodoIdentificador#recursivo: f
finmetodo

metodo NodoIdentificador#comoTexto
    devolver {(NodoIdentificador ~t)}#formatear: yo#nombre
finmetodo

[DOCUMENTA
@brief{Declara una variable.}
DOCUMENTA]
clase NodoVariable hereda Nodo
    [DOCUMENTA
    @brief{@pd{NodoIdentificador} de la variable a crear.}
    DOCUMENTA]
    atributo nombre
finclase

metodo NodoVariable#inicializar: área, nombre
    fijar yo#áreaTextual a área
    fijar yo#nombre a nombre
finmetodo

metodo NodoVariable#recursivo: f
    %f: yo#nombre
finmetodo

metodo NodoVariable#comoTexto
    devolver {(NodoVariable ~t)}#formatear: yo#nombre
finmetodo

[DOCUMENTA
@brief{Fija una variable a una expresión.}
DOCUMENTA]
clase NodoFijar hereda Nodo
    [DOCUMENTA
    @brief{@pd{NodoIdentificador} con la variable a fijar.}
    DOCUMENTA]
    atributo objetivo

    [DOCUMENTA
    @brief{Expresión con el nuevo valor de la variable.}
    DOCUMENTA]
    atributo expresión
finclase

metodo NodoFijar#inicializar: área, objetivo, expresión
    fijar yo#áreaTextual a área
    fijar yo#objetivo a objetivo
    fijar yo#expresión a expresión
finmetodo

metodo NodoFijar#recursivo: f
    %f: yo#objetivo
    %f: yo#expresión
finmetodo

metodo NodoFijar#comoTexto
    devolver {(NodoFijar ~t a ~t)}#formatear: yo#objetivo, yo#expresión
finmetodo

[DOCUMENTA
@brief{Escribe un valor a la salida estándar.}
DOCUMENTA]
clase NodoEscribir hereda Nodo
    [DOCUMENTA
    @brief{Expresión a escribir.}
    DOCUMENTA]
    atributo expresión
finclase

metodo NodoEscribir#inicializar: área, expresión
    fijar yo#áreaTextual a área
    fijar yo#expresión a expresión
finmetodo

metodo NodoEscribir#recursivo: f
    %f: yo#expresión
finmetodo

metodo NodoEscribir#comoTexto
    devolver {(NodoEscribir ~t)}#formatear: yo#expresión
finmetodo

[DOCUMENTA
@brief{Escribe un fin de línea a la salida estándar.}
DOCUMENTA]
clase NodoNl hereda Nodo
finclase

metodo NodoNl#recursivo: f
finmetodo

metodo NodoNl#comoTexto
    devolver {(NodoNl)}
finmetodo

[DOCUMENTA
@brief{Un parámetro al declarar una función.}
DOCUMENTA]
clase NodoParámetro hereda Nodo
    [DOCUMENTA
    @brief{@pd{NodoIdentificador} con el nombre del parámetro.}
    DOCUMENTA]
    atributo identificador

    [DOCUMENTA
    @brief{@pd{Boole} que indica si es un parámetro variadic o no.}
    DOCUMENTA]
    atributo esVariadic
finclase

metodo NodoParámetro#inicializar: área, identificador, esVariadic
    fijar yo#áreaTextual a área
    fijar yo#identificador a identificador
    fijar yo#esVariadic a esVariadic
finmetodo

metodo NodoParámetro#recursivo: f
    %f: yo#identificador
finmetodo

metodo NodoParámetro#comoTexto
    devolver {(NodoParámetro ~t~t)}#formatear: (yo#esVariadic#escojer: {...}, {}), yo#identificador
finmetodo

[DOCUMENTA
@brief{Falla con un error si la expresión no es verdadera.}
DOCUMENTA]
clase NodoNecesitas hereda Nodo
    [DOCUMENTA
    @brief{Expresión a comparar.}
    DOCUMENTA]
    atributo expresión
finclase

metodo NodoNecesitas#inicializar: área, expresión
    fijar yo#áreaTextual a área
    fijar yo#expresión a expresión
finmetodo

metodo NodoNecesitas#recursivo: f
    %f: yo#expresión
finmetodo

metodo NodoNecesitas#comoTexto
    devolver {(NodoNecesitas ~t)}#formatear: yo#expresión
finmetodo

[DOCUMENTA
@brief{Devuelve un valor de la función actual.}

Solo puede aparecer dentro de un @pd{NodoFunciónAnónima}.
DOCUMENTA]
clase NodoDevolver hereda Nodo
    [DOCUMENTA
    @brief{Expresión a devolver}
    DOCUMENTA]
    atributo expresión
finclase

metodo NodoDevolver#inicializar: área, expresión
    fijar yo#áreaTextual a área
    fijar yo#expresión a expresión
finmetodo

metodo NodoDevolver#recursivo: f
    %f: yo#expresión
finmetodo

metodo NodoDevolver#comoTexto
    devolver {(NodoDevolver ~t)}#formatear: yo#expresión
finmetodo

[DOCUMENTA
@brief{Condicional booleano.}
DOCUMENTA]
clase NodoSi hereda Nodo
    [DOCUMENTA
    @brief{Expresión que controlará el condicional.}
    DOCUMENTA]
    atributo condición

    [DOCUMENTA
    @brief{@pd{NodoBloque} con el cuerpo si la condición se cumple.}
    DOCUMENTA]
    atributo cuerpoSiVerdadero

    [DOCUMENTA
    @brief{@pd{NodoBloque} con el cuerpo si la condición no se cumple.}
    DOCUMENTA]
    atributo cuerpoSiFalso
finclase

metodo NodoSi#inicializar: área, condición, cuerpoSiVerdadero, cuerpoSiFalso
    fijar yo#áreaTextual a área
    fijar yo#condición a condición
    fijar yo#cuerpoSiVerdadero a cuerpoSiVerdadero
    fijar yo#cuerpoSiFalso a cuerpoSiFalso
finmetodo

metodo NodoSi#recursivo: f
    %f: yo#condición
    %f: yo#cuerpoSiVerdadero
    %f: yo#cuerpoSiFalso
finmetodo

metodo NodoSi#comoTexto
    devolver {(NodoSi ~t entonces ~t si no ~t)}#formatear:
        yo#condición, yo#cuerpoSiVerdadero, yo#cuerpoSiFalso
finmetodo

[DOCUMENTA
@brief{Bucle mientras.}
DOCUMENTA]
clase NodoMientras hereda Nodo
    [DOCUMENTA
    @brief{Expresión con la condición a ejecutar.}
    DOCUMENTA]
    atributo condición

    [DOCUMENTA
    @brief{@pd{NodoBloque} con el cuerpo del bucle.}
    DOCUMENTA]
    atributo cuerpo
finclase

metodo NodoMientras#inicializar: área, condición, cuerpo
    fijar yo#áreaTextual a área
    fijar yo#condición a condición
    fijar yo#cuerpo a cuerpo
finmetodo

metodo NodoMientras#recursivo: f
    %f: yo#condición
    %f: yo#cuerpo
finmetodo

metodo NodoMientras#comoTexto
    devolver {(NodoMientras ~t entonces ~t)}#formatear: yo#condición, yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Importa un módulo.}
DOCUMENTA]
clase NodoUtilizar hereda Nodo
    [DOCUMENTA
    @brief{@pd{NodoLiteralTextual} con el módulo a importar.}
    DOCUMENTA]
    atributo módulo

    [DOCUMENTA
    @brief{El espacio de nombres bajo el cual importar el módulo.}

    Puede ser @pd{NULO}, en cuyo caso no se debe usar un espacio de nombres
    para importar el módulo. En otro caso es un @pd{NodoIdentificador} con el
    nombre de la variable a crear.
    DOCUMENTA]
    atributo espacioDeNombres

    [DOCUMENTA
    @brief{Los nombres específicos a importar.}

    Es un arreglo de @pd{NodoNombreEspecífico}s con los nombres a importar.
    DOCUMENTA]
    atributo nombresEspecíficos
finclase

metodo NodoUtilizar#inicializar: área, módulo, espacioDeNombres, nombresEspecíficos
    fijar yo#áreaTextual a área
    fijar yo#módulo a módulo
    fijar yo#espacioDeNombres a espacioDeNombres
    fijar yo#nombresEspecíficos a nombresEspecíficos
finmetodo

metodo NodoUtilizar#recursivo: f
    %f: yo#módulo
    si no EsNulo: yo#espacioDeNombres
        %f: yo#espacioDeNombres
    finsi
    ParaCadaElemento: yo#nombresEspecíficos, f
finmetodo

metodo NodoUtilizar#comoTexto
    devolver {(NodoUtilizar ~t // ~t // ~t)}#formatear:
        yo#módulo, yo#espacioDeNombres, yo#nombresEspecíficos
finmetodo

[DOCUMENTA
@brief{Un nombre a importar de otro módulo.}
DOCUMENTA]
clase NodoNombreEspecífico hereda Nodo
    [DOCUMENTA
    @brief{Nombre de la variable a importar.}

    Un @pd{NodoLiteralTextual}.
    DOCUMENTA]
    atributo nombre

    [DOCUMENTA
    @brief{Variable que se importó.}

    Un @pd{NodoIdentificador}.
    DOCUMENTA]
    atributo renombre
finclase

metodo NodoNombreEspecífico#inicializar: área, nombre, renombre
    fijar yo#áreaTextual a área
    fijar yo#nombre a nombre
    fijar yo#renombre a renombre
finmetodo

metodo NodoNombreEspecífico#recursivo: f
    %f: yo#nombre
    %f: yo#renombre
finmetodo

metodo NodoNombreEspecífico#comoTexto
    devolver {(NodoNombreEspecífico ~t ~t)}#formatear: yo#nombre, yo#renombre
finmetodo

[DOCUMENTA
@brief{Literal numérica.}
DOCUMENTA]
clase NodoLiteralNumérica hereda Nodo
    [DOCUMENTA
    @brief{El valor como un @pd{Numero}.}
    DOCUMENTA]
    atributo valor
finclase

metodo NodoLiteralNumérica#inicializar: área, valor
    fijar yo#áreaTextual a área
    fijar yo#valor a valor
finmetodo

metodo NodoLiteralNumérica#recursivo: f
finmetodo

metodo NodoLiteralNumérica#comoTexto
    devolver {(NodoLiteralNumérica ~t)}#formatear: yo#valor
finmetodo

[DOCUMENTA
@brief{Literal textual.}
DOCUMENTA]
clase NodoLiteralTextual hereda Nodo
    [DOCUMENTA
    @brief{El valor como un @pd{Texto}.}
    DOCUMENTA]
    atributo valor
finclase

metodo NodoLiteralTextual#inicializar: área, valor
    fijar yo#áreaTextual a área
    fijar yo#valor a valor
finmetodo

metodo NodoLiteralTextual#recursivo: f
finmetodo

metodo Nodo#comoTexto
    devolver {(NodoLiteralTextual ~t)}#formatear: yo#valor
finmetodo

[DOCUMENTA
@brief{Argumento al enviar un mensaje.}
DOCUMENTA]
clase NodoArgumento hereda Nodo
    [DOCUMENTA
    @brief{Expresión con el valor a usar.}
    DOCUMENTA]
    atributo expresión

    [DOCUMENTA
    @brief{Si este argumento es variadic.}

    De ser verdadero corresponde a la sintaxis @pd{Ejemplo: ...A, ...B, ...C}.
    DOCUMENTA]
    atributo esVariadic
finclase

metodo NodoArgumento#inicializar: área, expresión, esVariadic
    fijar yo#áreaTextual a área
    fijar yo#expresión a expresión
    fijar yo#esVariadic a esVariadic
finmetodo

metodo NodoArgumento#recursivo: f
    %f: yo#expresión
finmetodo

metodo NodoArgumento#comoTexto
    devolver {(NodoArgumento ~t~t)}#formatear: (yo#esVariadic#escojer: {...}, {}), yo#expresión
finmetodo

[DOCUMENTA
@brief{Enviar un mensaje a un objeto.}
DOCUMENTA]
clase NodoEnviarMensaje hereda Nodo
    [DOCUMENTA
    @brief{Expresión a la que se le enviará el mensaje.}
    DOCUMENTA]
    atributo objeto

    [DOCUMENTA
    @brief{@pd{Texto} con el mensaje a enviar.}
    DOCUMENTA]
    atributo mensaje

    [DOCUMENTA
    @brief{Arreglo de @pd{NodoArgumento}s con los argumentos a usar.}
    DOCUMENTA]
    atributo argumentos
finclase

metodo NodoEnviarMensaje#inicializar: área, objeto, mensaje, argumentos
    fijar yo#áreaTextual a área
    fijar yo#objeto a objeto
    fijar yo#mensaje a mensaje
    fijar yo#argumentos a argumentos
finmetodo

metodo NodoEnviarMensaje#recursivo: f
    %f: yo#objeto
    ParaCadaElemento: yo#argumentos, f
finmetodo

metodo NodoEnviarMensaje#comoTexto
    devolver {(NodoEnviarMensaje ~t # ~t : ~t)}#formatear: yo#objeto, yo#mensaje, yo#argumentos
finmetodo

[DOCUMENTA
@brief{Una función anónima o lambda.}
DOCUMENTA]
clase NodoFunciónAnónima hereda Nodo
    [DOCUMENTA
    @brief{Arreglo de @pd{NodoParámetro}s con los parámetros de esta función.}
    DOCUMENTA]
    atributo parámetros

    [DOCUMENTA
    @brief{@pd{NodoBloque} con el cuerpo de la función.}
    DOCUMENTA]
    atributo cuerpo
finclase

metodo NodoFunciónAnónima#inicializar: área, parámetros, cuerpo
    fijar yo#áreaTextual a área
    fijar yo#parámetros a parámetros
    fijar yo#cuerpo a cuerpo
finmetodo

metodo NodoFunciónAnónima#recursivo: f
    ParaCadaElemento: yo#parámetros, f
    %f: yo#cuerpo
finmetodo

metodo NodoFunciónAnónima#comoTexto
    devolver {(NodoFunciónAnónima ~t ~t)}#formatear: yo#parámetros, yo#cuerpo
finmetodo

[DOCUMENTA
@brief{Niega el valor booleano de una expresión.}
DOCUMENTA]
clase NodoNo hereda Nodo
    [DOCUMENTA
    @brief{Expresión a negar.}
    DOCUMENTA]
    atributo expresión
finclase

metodo NodoNo#inicializar: área, expresión
    fijar yo#áreaTextual a área
    fijar yo#expresión a expresión
finmetodo

metodo NodoNo#recursivo: f
    %f: yo#expresión
finmetodo

metodo NodoNo#comoTexto
    devolver {(NodoNo ~t)}#formatear: yo#expresión
finmetodo

[DOCUMENTA
@brief{Determina si dos valores son el mismo objeto.}

Determina si @pd{lhs} y @pd{rhs} (ambos expresiones) son el mismo objeto.
DOCUMENTA]
clase NodoSonIdénticos hereda Nodo
    atributo lhs, rhs
finclase

metodo NodoSonIdénticos#inicializar: área, lhs, rhs
    fijar yo#áreaTextual a área
    fijar yo#lhs a lhs
    fijar yo#rhs a rhs
finmetodo

metodo NodoSonIdénticos#recursivo: f
    %f: yo#lhs
    %f: yo#rhs
finmetodo

metodo NodoSonIdénticos#comoTexto
    devolver {(NodoSonIdénticos ~t y ~t)}#formatear: yo#lhs, yo#rhs
finmetodo

[DOCUMENTA
@brief{Un builtin del compilador.}

Los builtins son puntos de extensión del compilador, son como nodos
personalizados del AST.
DOCUMENTA]
clase NodoBuiltin hereda Nodo
    [DOCUMENTA
    @brief{@pd{Texto} con el nombre de este builtin.}
    DOCUMENTA]
    atributo nombre

    [DOCUMENTA
    @brief{Arreglo con los argumentos del builtin.}

    El tipo de los elementos depende del builtin que se desee usar.
    DOCUMENTA]
    atributo argumentos
finclase

metodo NodoBuiltin#inicializar: área, nombre, argumentos
    fijar yo#áreaTextual a área
    fijar yo#nombre a nombre
    fijar yo#argumentos a argumentos
finmetodo

metodo NodoBuiltin#recursivo: f
    ParaCadaElemento: yo#argumentos, f
finmetodo

metodo NodoBuiltin#comoTexto
    devolver {(NodoBuiltin ~t: ~t)}#formatear: yo#nombre, yo#argumentos
finmetodo
